/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelResponseReturnList from '../model/ModelResponseReturnList';
import ReturnActionList200Response from '../model/ReturnActionList200Response';
import ReturnCount200Response from '../model/ReturnCount200Response';
import ReturnInfo200Response from '../model/ReturnInfo200Response';
import ReturnReasonList200Response from '../model/ReturnReasonList200Response';
import ReturnStatusList200Response from '../model/ReturnStatusList200Response';

/**
* Return service.
* @module api/ReturnApi
* @version 1.1
*/
export default class ReturnApi {

    /**
    * Constructs a new ReturnApi. 
    * @alias module:api/ReturnApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the returnActionList operation.
     * @callback module:api/ReturnApi~returnActionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReturnActionList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * return.action.list
     * Retrieve list of return actions
     * @param {module:api/ReturnApi~returnActionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReturnActionList200Response}
     */
    returnActionList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReturnActionList200Response;
      return this.apiClient.callApi(
        '/return.action.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the returnCount operation.
     * @callback module:api/ReturnApi~returnCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReturnCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * return.count
     * Count returns in store
     * @param {Object} opts Optional parameters
     * @param {String} [orderIds] Counts return requests specified by order ids
     * @param {String} [customerId] Counts return requests quantity specified by customer id
     * @param {String} [storeId] Store Id
     * @param {String} [status] Defines status
     * @param {String} [returnType] Retrieves returns specified by return type
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [reportRequestId] Report request id
     * @param {Boolean} [disableReportCache = false)] Disable report cache for current request
     * @param {module:api/ReturnApi~returnCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReturnCount200Response}
     */
    returnCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'order_ids': opts['orderIds'],
        'customer_id': opts['customerId'],
        'store_id': opts['storeId'],
        'status': opts['status'],
        'return_type': opts['returnType'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'modified_from': opts['modifiedFrom'],
        'modified_to': opts['modifiedTo'],
        'report_request_id': opts['reportRequestId'],
        'disable_report_cache': opts['disableReportCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReturnCount200Response;
      return this.apiClient.callApi(
        '/return.count.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the returnInfo operation.
     * @callback module:api/ReturnApi~returnInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReturnInfo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * return.info
     * Retrieve return information.
     * @param {String} id Entity id
     * @param {Object} opts Optional parameters
     * @param {String} [orderId] Defines the order id
     * @param {String} [storeId] Store Id
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [params = 'id,order_products')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/ReturnApi~returnInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReturnInfo200Response}
     */
    returnInfo(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling returnInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'order_id': opts['orderId'],
        'store_id': opts['storeId'],
        'response_fields': opts['responseFields'],
        'params': opts['params'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReturnInfo200Response;
      return this.apiClient.callApi(
        '/return.info.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the returnList operation.
     * @callback module:api/ReturnApi~returnListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseReturnList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * return.list
     * Get list of return requests from store.
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {String} [orderId] Defines the order id
     * @param {String} [orderIds] Retrieves return requests specified by order ids
     * @param {String} [customerId] Retrieves return requests specified by customer id
     * @param {String} [storeId] Store Id
     * @param {String} [status] Defines status
     * @param {String} [returnType] Retrieves returns specified by return type
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [params = 'id,order_products')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [reportRequestId] Report request id
     * @param {Boolean} [disableReportCache = false)] Disable report cache for current request
     * @param {module:api/ReturnApi~returnListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseReturnList}
     */
    returnList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'order_id': opts['orderId'],
        'order_ids': opts['orderIds'],
        'customer_id': opts['customerId'],
        'store_id': opts['storeId'],
        'status': opts['status'],
        'return_type': opts['returnType'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'modified_from': opts['modifiedFrom'],
        'modified_to': opts['modifiedTo'],
        'response_fields': opts['responseFields'],
        'params': opts['params'],
        'exclude': opts['exclude'],
        'report_request_id': opts['reportRequestId'],
        'disable_report_cache': opts['disableReportCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseReturnList;
      return this.apiClient.callApi(
        '/return.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the returnReasonList operation.
     * @callback module:api/ReturnApi~returnReasonListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReturnReasonList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * return.reason.list
     * Retrieve list of return reasons
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/ReturnApi~returnReasonListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReturnReasonList200Response}
     */
    returnReasonList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReturnReasonList200Response;
      return this.apiClient.callApi(
        '/return.reason.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the returnStatusList operation.
     * @callback module:api/ReturnApi~returnStatusListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReturnStatusList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * return.status.list
     * Retrieve list of statuses
     * @param {module:api/ReturnApi~returnStatusListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReturnStatusList200Response}
     */
    returnStatusList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReturnStatusList200Response;
      return this.apiClient.callApi(
        '/return.status.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
