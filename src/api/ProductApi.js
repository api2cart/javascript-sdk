/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountConfigUpdate200Response from '../model/AccountConfigUpdate200Response';
import AttributeDelete200Response from '../model/AttributeDelete200Response';
import AttributeValueDelete200Response from '../model/AttributeValueDelete200Response';
import CartValidate200Response from '../model/CartValidate200Response';
import CategoryAddBatch200Response from '../model/CategoryAddBatch200Response';
import CustomerDelete200Response from '../model/CustomerDelete200Response';
import ModelResponseProductAttributeList from '../model/ModelResponseProductAttributeList';
import ModelResponseProductBrandList from '../model/ModelResponseProductBrandList';
import ModelResponseProductChildItemList from '../model/ModelResponseProductChildItemList';
import ModelResponseProductCurrencyList from '../model/ModelResponseProductCurrencyList';
import ModelResponseProductList from '../model/ModelResponseProductList';
import ModelResponseProductOptionList from '../model/ModelResponseProductOptionList';
import ModelResponseProductReviewList from '../model/ModelResponseProductReviewList';
import ProductAdd from '../model/ProductAdd';
import ProductAdd200Response from '../model/ProductAdd200Response';
import ProductAddBatch from '../model/ProductAddBatch';
import ProductAttributeValueSet200Response from '../model/ProductAttributeValueSet200Response';
import ProductAttributeValueUnset200Response from '../model/ProductAttributeValueUnset200Response';
import ProductChildItemFind200Response from '../model/ProductChildItemFind200Response';
import ProductChildItemInfo200Response from '../model/ProductChildItemInfo200Response';
import ProductCount200Response from '../model/ProductCount200Response';
import ProductCurrencyAdd200Response from '../model/ProductCurrencyAdd200Response';
import ProductDeleteBatch from '../model/ProductDeleteBatch';
import ProductFind200Response from '../model/ProductFind200Response';
import ProductImageAdd from '../model/ProductImageAdd';
import ProductImageAdd200Response from '../model/ProductImageAdd200Response';
import ProductImageUpdate200Response from '../model/ProductImageUpdate200Response';
import ProductInfo200Response from '../model/ProductInfo200Response';
import ProductManufacturerAdd200Response from '../model/ProductManufacturerAdd200Response';
import ProductOptionAdd from '../model/ProductOptionAdd';
import ProductOptionAdd200Response from '../model/ProductOptionAdd200Response';
import ProductOptionAssign200Response from '../model/ProductOptionAssign200Response';
import ProductOptionValueAdd200Response from '../model/ProductOptionValueAdd200Response';
import ProductOptionValueAssign200Response from '../model/ProductOptionValueAssign200Response';
import ProductPriceAdd from '../model/ProductPriceAdd';
import ProductPriceUpdate from '../model/ProductPriceUpdate';
import ProductTaxAdd from '../model/ProductTaxAdd';
import ProductTaxAdd200Response from '../model/ProductTaxAdd200Response';
import ProductUpdate from '../model/ProductUpdate';
import ProductUpdateBatch from '../model/ProductUpdateBatch';
import ProductVariantAdd from '../model/ProductVariantAdd';
import ProductVariantAdd200Response from '../model/ProductVariantAdd200Response';
import ProductVariantAddBatch from '../model/ProductVariantAddBatch';
import ProductVariantDeleteBatch from '../model/ProductVariantDeleteBatch';
import ProductVariantImageAdd from '../model/ProductVariantImageAdd';
import ProductVariantImageAdd200Response from '../model/ProductVariantImageAdd200Response';
import ProductVariantPriceAdd from '../model/ProductVariantPriceAdd';
import ProductVariantPriceUpdate from '../model/ProductVariantPriceUpdate';
import ProductVariantUpdate from '../model/ProductVariantUpdate';
import ProductVariantUpdateBatch from '../model/ProductVariantUpdateBatch';

/**
* Product service.
* @module api/ProductApi
* @version 1.1
*/
export default class ProductApi {

    /**
    * Constructs a new ProductApi. 
    * @alias module:api/ProductApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productAdd operation.
     * @callback module:api/ProductApi~productAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.add
     * Add new product to store.
     * @param {module:model/ProductAdd} productAdd 
     * @param {module:api/ProductApi~productAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductAdd200Response}
     */
    productAdd(productAdd, callback) {
      let postBody = productAdd;
      // verify the required parameter 'productAdd' is set
      if (productAdd === undefined || productAdd === null) {
        throw new Error("Missing the required parameter 'productAdd' when calling productAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductAdd200Response;
      return this.apiClient.callApi(
        '/product.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAddBatch operation.
     * @callback module:api/ProductApi~productAddBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryAddBatch200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.add.batch
     * Add new products to the store.
     * @param {module:model/ProductAddBatch} productAddBatch 
     * @param {module:api/ProductApi~productAddBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryAddBatch200Response}
     */
    productAddBatch(productAddBatch, callback) {
      let postBody = productAddBatch;
      // verify the required parameter 'productAddBatch' is set
      if (productAddBatch === undefined || productAddBatch === null) {
        throw new Error("Missing the required parameter 'productAddBatch' when calling productAddBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoryAddBatch200Response;
      return this.apiClient.callApi(
        '/product.add.batch.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAttributeList operation.
     * @callback module:api/ProductApi~productAttributeListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseProductAttributeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.attribute.list
     * Get list of attributes and values.
     * @param {String} productId Retrieves attributes specified by product id
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {String} [attributeId] Retrieves info for specified attribute_id
     * @param {String} [variantId] Defines product's variants specified by variant id
     * @param {String} [attributeGroupId] Filter by attribute_group_id
     * @param {String} [langId] Retrieves attributes specified by language id
     * @param {String} [storeId] Retrieves attributes specified by store id
     * @param {String} [setName] Retrieves attributes specified by set_name in Magento
     * @param {String} [sortBy = 'attribute_id')] Set field to sort by
     * @param {String} [sortDirection = 'asc')] Set sorting direction
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [params = 'attribute_id,name')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/ProductApi~productAttributeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseProductAttributeList}
     */
    productAttributeList(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productAttributeList");
      }

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'product_id': productId,
        'attribute_id': opts['attributeId'],
        'variant_id': opts['variantId'],
        'attribute_group_id': opts['attributeGroupId'],
        'lang_id': opts['langId'],
        'store_id': opts['storeId'],
        'set_name': opts['setName'],
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection'],
        'response_fields': opts['responseFields'],
        'params': opts['params'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseProductAttributeList;
      return this.apiClient.callApi(
        '/product.attribute.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAttributeValueSet operation.
     * @callback module:api/ProductApi~productAttributeValueSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductAttributeValueSet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.attribute.value.set
     * Set attribute value to product.
     * @param {String} productId Defines product id where the attribute should be added
     * @param {Object} opts Optional parameters
     * @param {String} [attributeId] Filter by attribute_id
     * @param {String} [attributeGroupId] Filter by attribute_group_id
     * @param {String} [attributeName] Define attribute name
     * @param {String} [value] Define attribute value
     * @param {Number} [valueId] Define attribute value id
     * @param {String} [langId] Language id
     * @param {String} [storeId] Store Id
     * @param {module:api/ProductApi~productAttributeValueSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductAttributeValueSet200Response}
     */
    productAttributeValueSet(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productAttributeValueSet");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'attribute_id': opts['attributeId'],
        'attribute_group_id': opts['attributeGroupId'],
        'attribute_name': opts['attributeName'],
        'value': opts['value'],
        'value_id': opts['valueId'],
        'lang_id': opts['langId'],
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductAttributeValueSet200Response;
      return this.apiClient.callApi(
        '/product.attribute.value.set.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAttributeValueUnset operation.
     * @callback module:api/ProductApi~productAttributeValueUnsetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductAttributeValueUnset200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.attribute.value.unset
     * Removes attribute value for a product.
     * @param {String} productId Product id
     * @param {String} attributeId Attribute Id
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {Boolean} [includeDefault = false)] Boolean, whether or not to unset default value of the attribute, if applicable
     * @param {Boolean} [reindex = true)] Is reindex required
     * @param {Boolean} [clearCache = true)] Is cache clear required
     * @param {module:api/ProductApi~productAttributeValueUnsetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductAttributeValueUnset200Response}
     */
    productAttributeValueUnset(productId, attributeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productAttributeValueUnset");
      }
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling productAttributeValueUnset");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'attribute_id': attributeId,
        'store_id': opts['storeId'],
        'include_default': opts['includeDefault'],
        'reindex': opts['reindex'],
        'clear_cache': opts['clearCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductAttributeValueUnset200Response;
      return this.apiClient.callApi(
        '/product.attribute.value.unset.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productBrandList operation.
     * @callback module:api/ProductApi~productBrandListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseProductBrandList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.brand.list
     * Get list of brands from your store.
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {String} [brandIds] Retrieves brands specified by brand ids
     * @param {String} [categoryId] Retrieves product brands specified by category id
     * @param {String} [parentId] Retrieves brands specified by parent id
     * @param {String} [storeId] Store Id
     * @param {String} [langId] Language id
     * @param {String} [findWhere] Entity search that is specified by the comma-separated unique fields
     * @param {String} [findValue] Entity search that is specified by some value
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [params = 'id,name,short_description,active,url')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/ProductApi~productBrandListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseProductBrandList}
     */
    productBrandList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'brand_ids': opts['brandIds'],
        'category_id': opts['categoryId'],
        'parent_id': opts['parentId'],
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'find_where': opts['findWhere'],
        'find_value': opts['findValue'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'modified_from': opts['modifiedFrom'],
        'modified_to': opts['modifiedTo'],
        'response_fields': opts['responseFields'],
        'params': opts['params'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseProductBrandList;
      return this.apiClient.callApi(
        '/product.brand.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productChildItemFind operation.
     * @callback module:api/ProductApi~productChildItemFindCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductChildItemFind200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.child_item.find
     * Search product child item (bundled item or configurable product variant) in store catalog.
     * @param {Object} opts Optional parameters
     * @param {String} [findValue] Entity search that is specified by some value
     * @param {String} [findWhere] Entity search that is specified by the comma-separated unique fields
     * @param {String} [findParams = 'whole_words')] Entity search that is specified by comma-separated parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/ProductApi~productChildItemFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductChildItemFind200Response}
     */
    productChildItemFind(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'find_value': opts['findValue'],
        'find_where': opts['findWhere'],
        'find_params': opts['findParams'],
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductChildItemFind200Response;
      return this.apiClient.callApi(
        '/product.child_item.find.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productChildItemInfo operation.
     * @callback module:api/ProductApi~productChildItemInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductChildItemInfo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.child_item.info
     * Get child for specific product.
     * @param {String} productId Filter by parent product id
     * @param {String} id Entity id
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {String} [langId] Language id
     * @param {String} [currencyId] Currency Id
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [params = 'force_all')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {Boolean} [useLatestApiVersion = false)] Use the latest platform API version
     * @param {module:api/ProductApi~productChildItemInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductChildItemInfo200Response}
     */
    productChildItemInfo(productId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productChildItemInfo");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productChildItemInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'id': id,
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'currency_id': opts['currencyId'],
        'response_fields': opts['responseFields'],
        'params': opts['params'],
        'exclude': opts['exclude'],
        'use_latest_api_version': opts['useLatestApiVersion']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductChildItemInfo200Response;
      return this.apiClient.callApi(
        '/product.child_item.info.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productChildItemList operation.
     * @callback module:api/ProductApi~productChildItemListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseProductChildItemList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.child_item.list
     * Get a list of a product's child items, such as variants or bundle components. The total_count field in the response indicates the total number of items in the context of the current filter.
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve products child items via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {String} [productId] Filter by parent product id
     * @param {String} [productIds] Filter by parent product ids
     * @param {String} [sku] Filter by products variant's sku
     * @param {String} [storeId] Store Id
     * @param {String} [langId] Language id
     * @param {String} [currencyId] Currency Id
     * @param {Boolean} [availSale] Specifies the set of available/not available products for sale
     * @param {String} [findValue] Entity search that is specified by some value
     * @param {String} [findWhere] Child products search that is specified by field
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {Boolean} [returnGlobal = false)] Determines the type of products to be returned. If set to 'true', only global products will be returned; if set to 'false', only local products will be returned.
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [params = 'force_all')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [reportRequestId] Report request id
     * @param {Boolean} [disableReportCache = false)] Disable report cache for current request
     * @param {Boolean} [useLatestApiVersion = false)] Use the latest platform API version
     * @param {module:api/ProductApi~productChildItemListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseProductChildItemList}
     */
    productChildItemList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'product_id': opts['productId'],
        'product_ids': opts['productIds'],
        'sku': opts['sku'],
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'currency_id': opts['currencyId'],
        'avail_sale': opts['availSale'],
        'find_value': opts['findValue'],
        'find_where': opts['findWhere'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'modified_from': opts['modifiedFrom'],
        'modified_to': opts['modifiedTo'],
        'return_global': opts['returnGlobal'],
        'response_fields': opts['responseFields'],
        'params': opts['params'],
        'exclude': opts['exclude'],
        'report_request_id': opts['reportRequestId'],
        'disable_report_cache': opts['disableReportCache'],
        'use_latest_api_version': opts['useLatestApiVersion']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseProductChildItemList;
      return this.apiClient.callApi(
        '/product.child_item.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productCount operation.
     * @callback module:api/ProductApi~productCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.count
     * Count products in store.
     * @param {Object} opts Optional parameters
     * @param {String} [productIds] Counts products specified by product ids
     * @param {String} [sinceId] Retrieve entities starting from the specified id.
     * @param {String} [categoriesIds] Defines product add that is specified by comma-separated categories id
     * @param {String} [categoryId] Counts products specified by category id
     * @param {String} [storeId] Counts products specified by store id
     * @param {String} [langId] Counts products specified by language id
     * @param {Boolean} [availView] Specifies the set of visible/invisible products
     * @param {Boolean} [availSale] Specifies the set of available/not available products for sale
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [brandName] Retrieves brands specified by brand name
     * @param {Array.<String>} [productAttributes] Defines product attributes
     * @param {String} [status] Defines product's status
     * @param {String} [type] Defines products's type
     * @param {String} [visible = 'everywhere')] Filter items by visibility status
     * @param {String} [findValue] Entity search that is specified by some value
     * @param {String} [findWhere] Counts products that are searched specified by field
     * @param {String} [reportRequestId] Report request id
     * @param {Boolean} [returnGlobal = false)] Determines the type of products to be returned. If set to 'true', only global products will be returned; if set to 'false', only local products will be returned.
     * @param {Boolean} [disableReportCache = false)] Disable report cache for current request
     * @param {Boolean} [useLatestApiVersion = false)] Use the latest platform API version
     * @param {module:api/ProductApi~productCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductCount200Response}
     */
    productCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'product_ids': opts['productIds'],
        'since_id': opts['sinceId'],
        'categories_ids': opts['categoriesIds'],
        'category_id': opts['categoryId'],
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'avail_view': opts['availView'],
        'avail_sale': opts['availSale'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'modified_from': opts['modifiedFrom'],
        'modified_to': opts['modifiedTo'],
        'brand_name': opts['brandName'],
        'product_attributes': this.apiClient.buildCollectionParam(opts['productAttributes'], 'multi'),
        'status': opts['status'],
        'type': opts['type'],
        'visible': opts['visible'],
        'find_value': opts['findValue'],
        'find_where': opts['findWhere'],
        'report_request_id': opts['reportRequestId'],
        'return_global': opts['returnGlobal'],
        'disable_report_cache': opts['disableReportCache'],
        'use_latest_api_version': opts['useLatestApiVersion']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductCount200Response;
      return this.apiClient.callApi(
        '/product.count.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productCurrencyAdd operation.
     * @callback module:api/ProductApi~productCurrencyAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductCurrencyAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.currency.add
     * Add currency and/or set default in store
     * @param {String} iso3 Specifies standardized currency code
     * @param {Number} rate Defines the numerical identifier against to the major currency
     * @param {Object} opts Optional parameters
     * @param {String} [name] Defines currency's name
     * @param {Boolean} [avail = true)] Specifies whether the currency is available
     * @param {String} [symbolLeft] Defines the symbol that is located before the currency
     * @param {String} [symbolRight] Defines the symbol that is located after the currency
     * @param {Boolean} [_default = false)] Specifies currency's default meaning
     * @param {module:api/ProductApi~productCurrencyAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductCurrencyAdd200Response}
     */
    productCurrencyAdd(iso3, rate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'iso3' is set
      if (iso3 === undefined || iso3 === null) {
        throw new Error("Missing the required parameter 'iso3' when calling productCurrencyAdd");
      }
      // verify the required parameter 'rate' is set
      if (rate === undefined || rate === null) {
        throw new Error("Missing the required parameter 'rate' when calling productCurrencyAdd");
      }

      let pathParams = {
      };
      let queryParams = {
        'iso3': iso3,
        'rate': rate,
        'name': opts['name'],
        'avail': opts['avail'],
        'symbol_left': opts['symbolLeft'],
        'symbol_right': opts['symbolRight'],
        'default': opts['_default']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductCurrencyAdd200Response;
      return this.apiClient.callApi(
        '/product.currency.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productCurrencyList operation.
     * @callback module:api/ProductApi~productCurrencyListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseProductCurrencyList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.currency.list
     * Get list of currencies
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {Boolean} [_default] Specifies the set of default/not default currencies
     * @param {Boolean} [avail] Specifies the set of available/not available currencies
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [params = 'name,iso3,default,avail')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/ProductApi~productCurrencyListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseProductCurrencyList}
     */
    productCurrencyList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'default': opts['_default'],
        'avail': opts['avail'],
        'response_fields': opts['responseFields'],
        'params': opts['params'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseProductCurrencyList;
      return this.apiClient.callApi(
        '/product.currency.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productDelete operation.
     * @callback module:api/ProductApi~productDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.delete
     * Product delete
     * @param {String} id Product id that will be removed
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/ProductApi~productDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerDelete200Response}
     */
    productDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerDelete200Response;
      return this.apiClient.callApi(
        '/product.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productDeleteBatch operation.
     * @callback module:api/ProductApi~productDeleteBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryAddBatch200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.delete.batch
     * Remove product from the store.
     * @param {module:model/ProductDeleteBatch} productDeleteBatch 
     * @param {module:api/ProductApi~productDeleteBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryAddBatch200Response}
     */
    productDeleteBatch(productDeleteBatch, callback) {
      let postBody = productDeleteBatch;
      // verify the required parameter 'productDeleteBatch' is set
      if (productDeleteBatch === undefined || productDeleteBatch === null) {
        throw new Error("Missing the required parameter 'productDeleteBatch' when calling productDeleteBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoryAddBatch200Response;
      return this.apiClient.callApi(
        '/product.delete.batch.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productFind operation.
     * @callback module:api/ProductApi~productFindCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductFind200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.find
     * Search product in store catalog. \"Apple\" is specified here by default.
     * @param {String} findValue Entity search that is specified by some value
     * @param {Object} opts Optional parameters
     * @param {String} [findWhere = 'name')] Entity search that is specified by the comma-separated unique fields
     * @param {String} [findParams = 'whole_words')] Entity search that is specified by comma-separated parameters
     * @param {String} [findWhat = 'product')] Parameter's value specifies the entity that has to be found
     * @param {String} [langId] Search products specified by language id
     * @param {String} [storeId] Store Id
     * @param {module:api/ProductApi~productFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductFind200Response}
     */
    productFind(findValue, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'findValue' is set
      if (findValue === undefined || findValue === null) {
        throw new Error("Missing the required parameter 'findValue' when calling productFind");
      }

      let pathParams = {
      };
      let queryParams = {
        'find_value': findValue,
        'find_where': opts['findWhere'],
        'find_params': opts['findParams'],
        'find_what': opts['findWhat'],
        'lang_id': opts['langId'],
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductFind200Response;
      return this.apiClient.callApi(
        '/product.find.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productImageAdd operation.
     * @callback module:api/ProductApi~productImageAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductImageAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.image.add
     * Add image to product
     * @param {module:model/ProductImageAdd} productImageAdd 
     * @param {module:api/ProductApi~productImageAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductImageAdd200Response}
     */
    productImageAdd(productImageAdd, callback) {
      let postBody = productImageAdd;
      // verify the required parameter 'productImageAdd' is set
      if (productImageAdd === undefined || productImageAdd === null) {
        throw new Error("Missing the required parameter 'productImageAdd' when calling productImageAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductImageAdd200Response;
      return this.apiClient.callApi(
        '/product.image.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productImageDelete operation.
     * @callback module:api/ProductApi~productImageDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.image.delete
     * Delete image
     * @param {String} productId Defines product id where the image should be deleted
     * @param {String} id Entity id
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/ProductApi~productImageDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeDelete200Response}
     */
    productImageDelete(productId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productImageDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productImageDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'id': id,
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeDelete200Response;
      return this.apiClient.callApi(
        '/product.image.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productImageUpdate operation.
     * @callback module:api/ProductApi~productImageUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductImageUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.image.update
     * Update details of image
     * @param {String} productId Defines product id where the image should be updated
     * @param {String} id Defines image update specified by image id
     * @param {Object} opts Optional parameters
     * @param {String} [variantIds] Defines product's variants ids
     * @param {String} [storeId] Store Id
     * @param {String} [langId] Language id
     * @param {String} [imageName] Defines image's name
     * @param {String} [type = 'additional')] Defines image's types that are specified by comma-separated list
     * @param {String} [label] Defines alternative text that has to be attached to the picture
     * @param {Number} [position] Defines image’s position in the list
     * @param {Boolean} [hidden] Define is hide image
     * @param {module:api/ProductApi~productImageUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductImageUpdate200Response}
     */
    productImageUpdate(productId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productImageUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productImageUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'id': id,
        'variant_ids': opts['variantIds'],
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'image_name': opts['imageName'],
        'type': opts['type'],
        'label': opts['label'],
        'position': opts['position'],
        'hidden': opts['hidden']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductImageUpdate200Response;
      return this.apiClient.callApi(
        '/product.image.update.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productInfo operation.
     * @callback module:api/ProductApi~productInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductInfo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.info
     * Get information about a specific product by its ID. In the case of a multistore configuration, use the store_id filter to get a response in the context of a specific store.
     * @param {String} id Retrieves product's info specified by product id
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Retrieves product info specified by store id
     * @param {String} [langId] Retrieves product info specified by language id
     * @param {String} [currencyId] Currency Id
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [params = 'id,name,description,price,categories_ids')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [reportRequestId] Report request id
     * @param {Boolean} [disableReportCache = false)] Disable report cache for current request
     * @param {Boolean} [useLatestApiVersion = false)] Use the latest platform API version
     * @param {module:api/ProductApi~productInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductInfo200Response}
     */
    productInfo(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'currency_id': opts['currencyId'],
        'response_fields': opts['responseFields'],
        'params': opts['params'],
        'exclude': opts['exclude'],
        'report_request_id': opts['reportRequestId'],
        'disable_report_cache': opts['disableReportCache'],
        'use_latest_api_version': opts['useLatestApiVersion']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductInfo200Response;
      return this.apiClient.callApi(
        '/product.info.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productList operation.
     * @callback module:api/ProductApi~productListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseProductList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.list
     * Get list of products from your store. Returns 10 products by default.
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve products via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {String} [productIds] Retrieves products specified by product ids
     * @param {String} [sinceId] Retrieve entities starting from the specified id.
     * @param {String} [categoriesIds] Retrieves products specified by categories ids
     * @param {String} [categoryId] Retrieves products specified by category id
     * @param {String} [storeId] Retrieves products specified by store id
     * @param {String} [langId] Retrieves products specified by language id
     * @param {String} [currencyId] Currency Id
     * @param {Boolean} [availView] Specifies the set of visible/invisible products
     * @param {Boolean} [availSale] Specifies the set of available/not available products for sale
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [sku] Filter by product's sku
     * @param {String} [brandName] Retrieves brands specified by brand name
     * @param {Array.<String>} [productAttributes] Defines product attributes
     * @param {String} [status] Defines product's status
     * @param {String} [type] Defines products's type
     * @param {String} [visible = 'everywhere')] Filter items by visibility status
     * @param {String} [findValue] Entity search that is specified by some value
     * @param {String} [findWhere] Product search that is specified by field
     * @param {Boolean} [returnGlobal = false)] Determines the type of products to be returned. If set to 'true', only global products will be returned; if set to 'false', only local products will be returned.
     * @param {String} [params = 'id,name,description,price,categories_ids')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [sortBy = 'id')] Set field to sort by
     * @param {String} [sortDirection = 'asc')] Set sorting direction
     * @param {String} [reportRequestId] Report request id
     * @param {Boolean} [disableCache = false)] Disable cache for current request
     * @param {Boolean} [disableReportCache = false)] Disable report cache for current request
     * @param {Boolean} [useLatestApiVersion = false)] Use the latest platform API version
     * @param {module:api/ProductApi~productListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseProductList}
     */
    productList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'product_ids': opts['productIds'],
        'since_id': opts['sinceId'],
        'categories_ids': opts['categoriesIds'],
        'category_id': opts['categoryId'],
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'currency_id': opts['currencyId'],
        'avail_view': opts['availView'],
        'avail_sale': opts['availSale'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'modified_from': opts['modifiedFrom'],
        'modified_to': opts['modifiedTo'],
        'sku': opts['sku'],
        'brand_name': opts['brandName'],
        'product_attributes': this.apiClient.buildCollectionParam(opts['productAttributes'], 'multi'),
        'status': opts['status'],
        'type': opts['type'],
        'visible': opts['visible'],
        'find_value': opts['findValue'],
        'find_where': opts['findWhere'],
        'return_global': opts['returnGlobal'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude'],
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection'],
        'report_request_id': opts['reportRequestId'],
        'disable_cache': opts['disableCache'],
        'disable_report_cache': opts['disableReportCache'],
        'use_latest_api_version': opts['useLatestApiVersion']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseProductList;
      return this.apiClient.callApi(
        '/product.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productManufacturerAdd operation.
     * @callback module:api/ProductApi~productManufacturerAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductManufacturerAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.manufacturer.add
     * Add manufacturer to store and assign to product
     * @param {String} productId Defines products specified by product id
     * @param {String} manufacturer Defines product’s manufacturer's name
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/ProductApi~productManufacturerAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductManufacturerAdd200Response}
     */
    productManufacturerAdd(productId, manufacturer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productManufacturerAdd");
      }
      // verify the required parameter 'manufacturer' is set
      if (manufacturer === undefined || manufacturer === null) {
        throw new Error("Missing the required parameter 'manufacturer' when calling productManufacturerAdd");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'manufacturer': manufacturer,
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductManufacturerAdd200Response;
      return this.apiClient.callApi(
        '/product.manufacturer.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productOptionAdd operation.
     * @callback module:api/ProductApi~productOptionAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductOptionAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.option.add
     * Add product option from store.
     * @param {module:model/ProductOptionAdd} productOptionAdd 
     * @param {module:api/ProductApi~productOptionAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductOptionAdd200Response}
     */
    productOptionAdd(productOptionAdd, callback) {
      let postBody = productOptionAdd;
      // verify the required parameter 'productOptionAdd' is set
      if (productOptionAdd === undefined || productOptionAdd === null) {
        throw new Error("Missing the required parameter 'productOptionAdd' when calling productOptionAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductOptionAdd200Response;
      return this.apiClient.callApi(
        '/product.option.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productOptionAssign operation.
     * @callback module:api/ProductApi~productOptionAssignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductOptionAssign200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.option.assign
     * Assign option from product.
     * @param {String} productId Defines product id where the option should be assigned
     * @param {String} optionId Defines option id which has to be assigned
     * @param {Object} opts Optional parameters
     * @param {Boolean} [required = false)] Defines if the option is required
     * @param {Number} [sortOrder = 0)] Sort number in the list
     * @param {String} [optionValues] Defines option values that has to be assigned
     * @param {Boolean} [clearCache = true)] Is cache clear required
     * @param {module:api/ProductApi~productOptionAssignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductOptionAssign200Response}
     */
    productOptionAssign(productId, optionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productOptionAssign");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling productOptionAssign");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'option_id': optionId,
        'required': opts['required'],
        'sort_order': opts['sortOrder'],
        'option_values': opts['optionValues'],
        'clear_cache': opts['clearCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductOptionAssign200Response;
      return this.apiClient.callApi(
        '/product.option.assign.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productOptionDelete operation.
     * @callback module:api/ProductApi~productOptionDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.option.delete
     * Product option delete.
     * @param {String} optionId Defines option id that should be deleted
     * @param {String} productId Defines product id where the option should be deleted
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/ProductApi~productOptionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeDelete200Response}
     */
    productOptionDelete(optionId, productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling productOptionDelete");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productOptionDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'option_id': optionId,
        'product_id': productId,
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeDelete200Response;
      return this.apiClient.callApi(
        '/product.option.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productOptionList operation.
     * @callback module:api/ProductApi~productOptionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseProductOptionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.option.list
     * Get list of options.
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [productId] Retrieves products' options specified by product id
     * @param {String} [langId] Language id
     * @param {String} [storeId] Store Id
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [params = 'id,name,description')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/ProductApi~productOptionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseProductOptionList}
     */
    productOptionList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'product_id': opts['productId'],
        'lang_id': opts['langId'],
        'store_id': opts['storeId'],
        'response_fields': opts['responseFields'],
        'params': opts['params'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseProductOptionList;
      return this.apiClient.callApi(
        '/product.option.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productOptionValueAdd operation.
     * @callback module:api/ProductApi~productOptionValueAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductOptionValueAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.option.value.add
     * Add product option item from option.
     * @param {String} productId Defines product id where the option value should be added
     * @param {String} optionId Defines option id where the value has to be added
     * @param {Object} opts Optional parameters
     * @param {String} [optionValue] Defines option value that has to be added
     * @param {Number} [sortOrder = 0)] Sort number in the list
     * @param {String} [displayValue] Defines the value that will be displayed for the option value
     * @param {Boolean} [isDefault] Defines as a default
     * @param {Boolean} [clearCache = true)] Is cache clear required
     * @param {module:api/ProductApi~productOptionValueAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductOptionValueAdd200Response}
     */
    productOptionValueAdd(productId, optionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productOptionValueAdd");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling productOptionValueAdd");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'option_id': optionId,
        'option_value': opts['optionValue'],
        'sort_order': opts['sortOrder'],
        'display_value': opts['displayValue'],
        'is_default': opts['isDefault'],
        'clear_cache': opts['clearCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductOptionValueAdd200Response;
      return this.apiClient.callApi(
        '/product.option.value.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productOptionValueAssign operation.
     * @callback module:api/ProductApi~productOptionValueAssignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductOptionValueAssign200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.option.value.assign
     * Assign product option item from product.
     * @param {Number} productOptionId Defines product's option id where the value has to be assigned
     * @param {String} optionValueId Defines value id that has to be assigned
     * @param {Object} opts Optional parameters
     * @param {Boolean} [clearCache = true)] Is cache clear required
     * @param {module:api/ProductApi~productOptionValueAssignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductOptionValueAssign200Response}
     */
    productOptionValueAssign(productOptionId, optionValueId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productOptionId' is set
      if (productOptionId === undefined || productOptionId === null) {
        throw new Error("Missing the required parameter 'productOptionId' when calling productOptionValueAssign");
      }
      // verify the required parameter 'optionValueId' is set
      if (optionValueId === undefined || optionValueId === null) {
        throw new Error("Missing the required parameter 'optionValueId' when calling productOptionValueAssign");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_option_id': productOptionId,
        'option_value_id': optionValueId,
        'clear_cache': opts['clearCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductOptionValueAssign200Response;
      return this.apiClient.callApi(
        '/product.option.value.assign.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productOptionValueDelete operation.
     * @callback module:api/ProductApi~productOptionValueDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.option.value.delete
     * Product option value delete.
     * @param {String} optionId Defines option id where the value should be deleted
     * @param {String} optionValueId Defines option value id that should be deleted
     * @param {String} productId Defines product id where the option value should be deleted
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/ProductApi~productOptionValueDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeDelete200Response}
     */
    productOptionValueDelete(optionId, optionValueId, productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling productOptionValueDelete");
      }
      // verify the required parameter 'optionValueId' is set
      if (optionValueId === undefined || optionValueId === null) {
        throw new Error("Missing the required parameter 'optionValueId' when calling productOptionValueDelete");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productOptionValueDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'option_id': optionId,
        'option_value_id': optionValueId,
        'product_id': productId,
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeDelete200Response;
      return this.apiClient.callApi(
        '/product.option.value.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productOptionValueUpdate operation.
     * @callback module:api/ProductApi~productOptionValueUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountConfigUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.option.value.update
     * Update product option item from option.
     * @param {String} productId Defines product id where the option value should be updated
     * @param {String} optionId Defines option id where the value has to be updated
     * @param {String} optionValueId Defines value id that has to be assigned
     * @param {Object} opts Optional parameters
     * @param {String} [optionValue] Defines option value that has to be added
     * @param {Number} [price] Defines new product option price
     * @param {Number} [quantity] Defines new products' options quantity
     * @param {String} [displayValue] Defines the value that will be displayed for the option value
     * @param {Boolean} [clearCache = true)] Is cache clear required
     * @param {module:api/ProductApi~productOptionValueUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountConfigUpdate200Response}
     */
    productOptionValueUpdate(productId, optionId, optionValueId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productOptionValueUpdate");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling productOptionValueUpdate");
      }
      // verify the required parameter 'optionValueId' is set
      if (optionValueId === undefined || optionValueId === null) {
        throw new Error("Missing the required parameter 'optionValueId' when calling productOptionValueUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'option_id': optionId,
        'option_value_id': optionValueId,
        'option_value': opts['optionValue'],
        'price': opts['price'],
        'quantity': opts['quantity'],
        'display_value': opts['displayValue'],
        'clear_cache': opts['clearCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountConfigUpdate200Response;
      return this.apiClient.callApi(
        '/product.option.value.update.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productPriceAdd operation.
     * @callback module:api/ProductApi~productPriceAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartValidate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.price.add
     * Add some prices to the product.
     * @param {module:model/ProductPriceAdd} productPriceAdd 
     * @param {module:api/ProductApi~productPriceAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartValidate200Response}
     */
    productPriceAdd(productPriceAdd, callback) {
      let postBody = productPriceAdd;
      // verify the required parameter 'productPriceAdd' is set
      if (productPriceAdd === undefined || productPriceAdd === null) {
        throw new Error("Missing the required parameter 'productPriceAdd' when calling productPriceAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CartValidate200Response;
      return this.apiClient.callApi(
        '/product.price.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productPriceDelete operation.
     * @callback module:api/ProductApi~productPriceDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.price.delete
     * Delete some prices of the product
     * @param {String} productId Defines the product where the price has to be deleted
     * @param {Object} opts Optional parameters
     * @param {String} [groupPrices] Defines product's group prices
     * @param {String} [storeId] Store Id
     * @param {module:api/ProductApi~productPriceDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeDelete200Response}
     */
    productPriceDelete(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productPriceDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'group_prices': opts['groupPrices'],
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeDelete200Response;
      return this.apiClient.callApi(
        '/product.price.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productPriceUpdate operation.
     * @callback module:api/ProductApi~productPriceUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountConfigUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.price.update
     * Update some prices of the product.
     * @param {module:model/ProductPriceUpdate} productPriceUpdate 
     * @param {module:api/ProductApi~productPriceUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountConfigUpdate200Response}
     */
    productPriceUpdate(productPriceUpdate, callback) {
      let postBody = productPriceUpdate;
      // verify the required parameter 'productPriceUpdate' is set
      if (productPriceUpdate === undefined || productPriceUpdate === null) {
        throw new Error("Missing the required parameter 'productPriceUpdate' when calling productPriceUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountConfigUpdate200Response;
      return this.apiClient.callApi(
        '/product.price.update.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productReviewList operation.
     * @callback module:api/ProductApi~productReviewListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseProductReviewList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.review.list
     * Get reviews of a specific product.
     * @param {String} productId Product id
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {String} [ids] Retrieves reviews specified by ids
     * @param {String} [storeId] Store Id
     * @param {String} [status] Defines status
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [params = 'id,customer_id,email,message,status,product_id,nick_name,summary,rating,ratings,status,created_time')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/ProductApi~productReviewListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseProductReviewList}
     */
    productReviewList(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productReviewList");
      }

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'product_id': productId,
        'ids': opts['ids'],
        'store_id': opts['storeId'],
        'status': opts['status'],
        'response_fields': opts['responseFields'],
        'params': opts['params'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseProductReviewList;
      return this.apiClient.callApi(
        '/product.review.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productStoreAssign operation.
     * @callback module:api/ProductApi~productStoreAssignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountConfigUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.store.assign
     * Assign product to store
     * @param {String} productId Defines id of the product which should be assigned to a store
     * @param {String} storeId Defines id of the store product should be assigned to
     * @param {module:api/ProductApi~productStoreAssignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountConfigUpdate200Response}
     */
    productStoreAssign(productId, storeId, callback) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productStoreAssign");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling productStoreAssign");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'store_id': storeId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountConfigUpdate200Response;
      return this.apiClient.callApi(
        '/product.store.assign.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productTaxAdd operation.
     * @callback module:api/ProductApi~productTaxAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductTaxAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.tax.add
     * Add tax class and tax rate to store and assign to product.
     * @param {module:model/ProductTaxAdd} productTaxAdd 
     * @param {module:api/ProductApi~productTaxAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductTaxAdd200Response}
     */
    productTaxAdd(productTaxAdd, callback) {
      let postBody = productTaxAdd;
      // verify the required parameter 'productTaxAdd' is set
      if (productTaxAdd === undefined || productTaxAdd === null) {
        throw new Error("Missing the required parameter 'productTaxAdd' when calling productTaxAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductTaxAdd200Response;
      return this.apiClient.callApi(
        '/product.tax.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productUpdate operation.
     * @callback module:api/ProductApi~productUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountConfigUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.update
     * This method can be used to update certain product data. The list of supported parameters depends on the specific platform. Please transmit only those parameters that are supported by the particular platform. Please note that to update the product quantity, it is recommended to use relative parameters (increase_quantity or reduce_quantity) to avoid unexpected overwrites on heavily loaded stores.
     * @param {module:model/ProductUpdate} productUpdate 
     * @param {module:api/ProductApi~productUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountConfigUpdate200Response}
     */
    productUpdate(productUpdate, callback) {
      let postBody = productUpdate;
      // verify the required parameter 'productUpdate' is set
      if (productUpdate === undefined || productUpdate === null) {
        throw new Error("Missing the required parameter 'productUpdate' when calling productUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountConfigUpdate200Response;
      return this.apiClient.callApi(
        '/product.update.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productUpdateBatch operation.
     * @callback module:api/ProductApi~productUpdateBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryAddBatch200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.update.batch
     * Update products on the store.
     * @param {module:model/ProductUpdateBatch} productUpdateBatch 
     * @param {module:api/ProductApi~productUpdateBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryAddBatch200Response}
     */
    productUpdateBatch(productUpdateBatch, callback) {
      let postBody = productUpdateBatch;
      // verify the required parameter 'productUpdateBatch' is set
      if (productUpdateBatch === undefined || productUpdateBatch === null) {
        throw new Error("Missing the required parameter 'productUpdateBatch' when calling productUpdateBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoryAddBatch200Response;
      return this.apiClient.callApi(
        '/product.update.batch.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantAdd operation.
     * @callback module:api/ProductApi~productVariantAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductVariantAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.variant.add
     * Add variant to product.
     * @param {module:model/ProductVariantAdd} productVariantAdd 
     * @param {module:api/ProductApi~productVariantAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductVariantAdd200Response}
     */
    productVariantAdd(productVariantAdd, callback) {
      let postBody = productVariantAdd;
      // verify the required parameter 'productVariantAdd' is set
      if (productVariantAdd === undefined || productVariantAdd === null) {
        throw new Error("Missing the required parameter 'productVariantAdd' when calling productVariantAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductVariantAdd200Response;
      return this.apiClient.callApi(
        '/product.variant.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantAddBatch operation.
     * @callback module:api/ProductApi~productVariantAddBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryAddBatch200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.variant.add.batch
     * Add new product variants to the store.
     * @param {module:model/ProductVariantAddBatch} productVariantAddBatch 
     * @param {module:api/ProductApi~productVariantAddBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryAddBatch200Response}
     */
    productVariantAddBatch(productVariantAddBatch, callback) {
      let postBody = productVariantAddBatch;
      // verify the required parameter 'productVariantAddBatch' is set
      if (productVariantAddBatch === undefined || productVariantAddBatch === null) {
        throw new Error("Missing the required parameter 'productVariantAddBatch' when calling productVariantAddBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoryAddBatch200Response;
      return this.apiClient.callApi(
        '/product.variant.add.batch.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantDelete operation.
     * @callback module:api/ProductApi~productVariantDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeValueDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.variant.delete
     * Delete variant.
     * @param {String} id Defines variant removal, specified by variant id
     * @param {String} productId Defines product's id where the variant has to be deleted
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/ProductApi~productVariantDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeValueDelete200Response}
     */
    productVariantDelete(id, productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productVariantDelete");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productVariantDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'product_id': productId,
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeValueDelete200Response;
      return this.apiClient.callApi(
        '/product.variant.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantDeleteBatch operation.
     * @callback module:api/ProductApi~productVariantDeleteBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryAddBatch200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.variant.delete.batch
     * Remove product variants from the store.
     * @param {module:model/ProductVariantDeleteBatch} productVariantDeleteBatch 
     * @param {module:api/ProductApi~productVariantDeleteBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryAddBatch200Response}
     */
    productVariantDeleteBatch(productVariantDeleteBatch, callback) {
      let postBody = productVariantDeleteBatch;
      // verify the required parameter 'productVariantDeleteBatch' is set
      if (productVariantDeleteBatch === undefined || productVariantDeleteBatch === null) {
        throw new Error("Missing the required parameter 'productVariantDeleteBatch' when calling productVariantDeleteBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoryAddBatch200Response;
      return this.apiClient.callApi(
        '/product.variant.delete.batch.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantImageAdd operation.
     * @callback module:api/ProductApi~productVariantImageAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductVariantImageAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.variant.image.add
     * Add image to product
     * @param {module:model/ProductVariantImageAdd} productVariantImageAdd 
     * @param {module:api/ProductApi~productVariantImageAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductVariantImageAdd200Response}
     */
    productVariantImageAdd(productVariantImageAdd, callback) {
      let postBody = productVariantImageAdd;
      // verify the required parameter 'productVariantImageAdd' is set
      if (productVariantImageAdd === undefined || productVariantImageAdd === null) {
        throw new Error("Missing the required parameter 'productVariantImageAdd' when calling productVariantImageAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductVariantImageAdd200Response;
      return this.apiClient.callApi(
        '/product.variant.image.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantImageDelete operation.
     * @callback module:api/ProductApi~productVariantImageDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.variant.image.delete
     * Delete  image to product
     * @param {String} productId Defines product id where the variant image should be deleted
     * @param {String} productVariantId Defines product's variants specified by variant id
     * @param {String} id Entity id
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/ProductApi~productVariantImageDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeDelete200Response}
     */
    productVariantImageDelete(productId, productVariantId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productVariantImageDelete");
      }
      // verify the required parameter 'productVariantId' is set
      if (productVariantId === undefined || productVariantId === null) {
        throw new Error("Missing the required parameter 'productVariantId' when calling productVariantImageDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productVariantImageDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'product_variant_id': productVariantId,
        'id': id,
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeDelete200Response;
      return this.apiClient.callApi(
        '/product.variant.image.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantPriceAdd operation.
     * @callback module:api/ProductApi~productVariantPriceAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartValidate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.variant.price.add
     * Add some prices to the product variant.
     * @param {module:model/ProductVariantPriceAdd} productVariantPriceAdd 
     * @param {module:api/ProductApi~productVariantPriceAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartValidate200Response}
     */
    productVariantPriceAdd(productVariantPriceAdd, callback) {
      let postBody = productVariantPriceAdd;
      // verify the required parameter 'productVariantPriceAdd' is set
      if (productVariantPriceAdd === undefined || productVariantPriceAdd === null) {
        throw new Error("Missing the required parameter 'productVariantPriceAdd' when calling productVariantPriceAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CartValidate200Response;
      return this.apiClient.callApi(
        '/product.variant.price.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantPriceDelete operation.
     * @callback module:api/ProductApi~productVariantPriceDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.variant.price.delete
     * Delete some prices of the product variant.
     * @param {String} id Defines the variant where the price has to be deleted
     * @param {String} productId Product id
     * @param {String} groupPrices Defines variants's group prices
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/ProductApi~productVariantPriceDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeDelete200Response}
     */
    productVariantPriceDelete(id, productId, groupPrices, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productVariantPriceDelete");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productVariantPriceDelete");
      }
      // verify the required parameter 'groupPrices' is set
      if (groupPrices === undefined || groupPrices === null) {
        throw new Error("Missing the required parameter 'groupPrices' when calling productVariantPriceDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'product_id': productId,
        'group_prices': groupPrices,
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeDelete200Response;
      return this.apiClient.callApi(
        '/product.variant.price.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantPriceUpdate operation.
     * @callback module:api/ProductApi~productVariantPriceUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountConfigUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.variant.price.update
     * Update some prices of the product variant.
     * @param {module:model/ProductVariantPriceUpdate} productVariantPriceUpdate 
     * @param {module:api/ProductApi~productVariantPriceUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountConfigUpdate200Response}
     */
    productVariantPriceUpdate(productVariantPriceUpdate, callback) {
      let postBody = productVariantPriceUpdate;
      // verify the required parameter 'productVariantPriceUpdate' is set
      if (productVariantPriceUpdate === undefined || productVariantPriceUpdate === null) {
        throw new Error("Missing the required parameter 'productVariantPriceUpdate' when calling productVariantPriceUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountConfigUpdate200Response;
      return this.apiClient.callApi(
        '/product.variant.price.update.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantUpdate operation.
     * @callback module:api/ProductApi~productVariantUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountConfigUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.variant.update
     * Update variant.
     * @param {module:model/ProductVariantUpdate} productVariantUpdate 
     * @param {module:api/ProductApi~productVariantUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountConfigUpdate200Response}
     */
    productVariantUpdate(productVariantUpdate, callback) {
      let postBody = productVariantUpdate;
      // verify the required parameter 'productVariantUpdate' is set
      if (productVariantUpdate === undefined || productVariantUpdate === null) {
        throw new Error("Missing the required parameter 'productVariantUpdate' when calling productVariantUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountConfigUpdate200Response;
      return this.apiClient.callApi(
        '/product.variant.update.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantUpdateBatch operation.
     * @callback module:api/ProductApi~productVariantUpdateBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryAddBatch200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * product.variant.update.batch
     * Update products variants on the store.
     * @param {module:model/ProductVariantUpdateBatch} productVariantUpdateBatch 
     * @param {module:api/ProductApi~productVariantUpdateBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryAddBatch200Response}
     */
    productVariantUpdateBatch(productVariantUpdateBatch, callback) {
      let postBody = productVariantUpdateBatch;
      // verify the required parameter 'productVariantUpdateBatch' is set
      if (productVariantUpdateBatch === undefined || productVariantUpdateBatch === null) {
        throw new Error("Missing the required parameter 'productVariantUpdateBatch' when calling productVariantUpdateBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoryAddBatch200Response;
      return this.apiClient.callApi(
        '/product.variant.update.batch.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
