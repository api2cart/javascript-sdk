/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountConfigUpdate200Response from '../model/AccountConfigUpdate200Response';
import AttributeValueDelete200Response from '../model/AttributeValueDelete200Response';
import CategoryAddBatch200Response from '../model/CategoryAddBatch200Response';
import ModelResponseOrderAbandonedList from '../model/ModelResponseOrderAbandonedList';
import ModelResponseOrderList from '../model/ModelResponseOrderList';
import ModelResponseOrderPreestimateShippingList from '../model/ModelResponseOrderPreestimateShippingList';
import ModelResponseOrderShipmentList from '../model/ModelResponseOrderShipmentList';
import ModelResponseOrderStatusList from '../model/ModelResponseOrderStatusList';
import ModelResponseOrderTransactionList from '../model/ModelResponseOrderTransactionList';
import OrderAdd from '../model/OrderAdd';
import OrderAdd200Response from '../model/OrderAdd200Response';
import OrderCalculate from '../model/OrderCalculate';
import OrderCalculate200Response from '../model/OrderCalculate200Response';
import OrderCount200Response from '../model/OrderCount200Response';
import OrderFinancialStatusList200Response from '../model/OrderFinancialStatusList200Response';
import OrderFulfillmentStatusList200Response from '../model/OrderFulfillmentStatusList200Response';
import OrderInfo200Response from '../model/OrderInfo200Response';
import OrderPreestimateShippingList from '../model/OrderPreestimateShippingList';
import OrderRefundAdd from '../model/OrderRefundAdd';
import OrderRefundAdd200Response from '../model/OrderRefundAdd200Response';
import OrderReturnAdd from '../model/OrderReturnAdd';
import OrderReturnAdd200Response from '../model/OrderReturnAdd200Response';
import OrderReturnUpdate from '../model/OrderReturnUpdate';
import OrderShipmentAdd from '../model/OrderShipmentAdd';
import OrderShipmentAdd200Response from '../model/OrderShipmentAdd200Response';
import OrderShipmentAddBatch from '../model/OrderShipmentAddBatch';
import OrderShipmentDelete200Response from '../model/OrderShipmentDelete200Response';
import OrderShipmentInfo200Response from '../model/OrderShipmentInfo200Response';
import OrderShipmentTrackingAdd from '../model/OrderShipmentTrackingAdd';
import OrderShipmentTrackingAdd200Response from '../model/OrderShipmentTrackingAdd200Response';
import OrderShipmentUpdate from '../model/OrderShipmentUpdate';

/**
* Order service.
* @module api/OrderApi
* @version 1.1
*/
export default class OrderApi {

    /**
    * Constructs a new OrderApi. 
    * @alias module:api/OrderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the orderAbandonedList operation.
     * @callback module:api/OrderApi~orderAbandonedListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseOrderAbandonedList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.abandoned.list
     * Get list of orders that were left by customers before completing the order.
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {String} [customerId] Retrieves orders specified by customer id
     * @param {String} [customerEmail] Retrieves orders specified by customer email
     * @param {String} [storeId] Store Id
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {Boolean} [skipEmptyEmail = false)] Filter empty emails
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [params = 'customer,totals,items')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/OrderApi~orderAbandonedListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseOrderAbandonedList}
     */
    orderAbandonedList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'customer_id': opts['customerId'],
        'customer_email': opts['customerEmail'],
        'store_id': opts['storeId'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'modified_from': opts['modifiedFrom'],
        'modified_to': opts['modifiedTo'],
        'skip_empty_email': opts['skipEmptyEmail'],
        'response_fields': opts['responseFields'],
        'params': opts['params'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseOrderAbandonedList;
      return this.apiClient.callApi(
        '/order.abandoned.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderAdd operation.
     * @callback module:api/OrderApi~orderAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.add
     * Add a new order to the cart.
     * @param {module:model/OrderAdd} orderAdd 
     * @param {module:api/OrderApi~orderAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderAdd200Response}
     */
    orderAdd(orderAdd, callback) {
      let postBody = orderAdd;
      // verify the required parameter 'orderAdd' is set
      if (orderAdd === undefined || orderAdd === null) {
        throw new Error("Missing the required parameter 'orderAdd' when calling orderAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderAdd200Response;
      return this.apiClient.callApi(
        '/order.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderCalculate operation.
     * @callback module:api/OrderApi~orderCalculateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderCalculate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.calculate
     * <p>Calculates the total cost of an order for a given customer and a set of products, as well as the available shipping methods based on the specified address. The calculation takes into account store product prices, discounts, taxes, shipping costs, and other store settings. The result includes a detailed breakdown of the final order cost by its components.</p> <p>Note that the final totals, taxes, and other amounts must include the corresponding values for the selected shipping method.</p><p>The result of this method can be used when creating an order using the <strong>order.add</strong> method.</p>
     * @param {module:model/OrderCalculate} orderCalculate 
     * @param {module:api/OrderApi~orderCalculateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderCalculate200Response}
     */
    orderCalculate(orderCalculate, callback) {
      let postBody = orderCalculate;
      // verify the required parameter 'orderCalculate' is set
      if (orderCalculate === undefined || orderCalculate === null) {
        throw new Error("Missing the required parameter 'orderCalculate' when calling orderCalculate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderCalculate200Response;
      return this.apiClient.callApi(
        '/order.calculate.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderCount operation.
     * @callback module:api/OrderApi~orderCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.count
     * Count orders in store
     * @param {Object} opts Optional parameters
     * @param {String} [orderIds] Counts orders specified by order ids
     * @param {String} [ids] Counts orders specified by ids
     * @param {String} [customerId] Counts orders quantity specified by customer id
     * @param {String} [storeId] Counts orders quantity specified by store id
     * @param {String} [customerEmail] Counts orders quantity specified by customer email
     * @param {String} [orderStatus] Counts orders quantity specified by order status
     * @param {Array.<String>} [orderStatusIds] Retrieves orders specified by order statuses
     * @param {String} [ebayOrderStatus] Counts orders quantity specified by order status
     * @param {String} [financialStatus] Counts orders quantity specified by financial status
     * @param {Array.<String>} [financialStatusIds] Retrieves orders count specified by financial status ids
     * @param {String} [fulfillmentChannel] Retrieves order with a fulfillment channel
     * @param {String} [fulfillmentStatus] Create order with fulfillment status
     * @param {String} [shippingMethod] Retrieve entities according to shipping method
     * @param {String} [deliveryMethod] Retrieves order with delivery method
     * @param {String} [tags] Order tags
     * @param {String} [shipNodeType] Retrieves order with ship node type
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {module:api/OrderApi~orderCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderCount200Response}
     */
    orderCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'order_ids': opts['orderIds'],
        'ids': opts['ids'],
        'customer_id': opts['customerId'],
        'store_id': opts['storeId'],
        'customer_email': opts['customerEmail'],
        'order_status': opts['orderStatus'],
        'order_status_ids': this.apiClient.buildCollectionParam(opts['orderStatusIds'], 'multi'),
        'ebay_order_status': opts['ebayOrderStatus'],
        'financial_status': opts['financialStatus'],
        'financial_status_ids': this.apiClient.buildCollectionParam(opts['financialStatusIds'], 'multi'),
        'fulfillment_channel': opts['fulfillmentChannel'],
        'fulfillment_status': opts['fulfillmentStatus'],
        'shipping_method': opts['shippingMethod'],
        'delivery_method': opts['deliveryMethod'],
        'tags': opts['tags'],
        'ship_node_type': opts['shipNodeType'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'modified_from': opts['modifiedFrom'],
        'modified_to': opts['modifiedTo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderCount200Response;
      return this.apiClient.callApi(
        '/order.count.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderFinancialStatusList operation.
     * @callback module:api/OrderApi~orderFinancialStatusListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderFinancialStatusList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.financial_status.list
     * Retrieve list of financial statuses
     * @param {module:api/OrderApi~orderFinancialStatusListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderFinancialStatusList200Response}
     */
    orderFinancialStatusList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderFinancialStatusList200Response;
      return this.apiClient.callApi(
        '/order.financial_status.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderFulfillmentStatusList operation.
     * @callback module:api/OrderApi~orderFulfillmentStatusListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderFulfillmentStatusList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.fulfillment_status.list
     * Retrieve list of fulfillment statuses
     * @param {Object} opts Optional parameters
     * @param {String} [action] Available statuses for the specified action.
     * @param {module:api/OrderApi~orderFulfillmentStatusListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderFulfillmentStatusList200Response}
     */
    orderFulfillmentStatusList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'action': opts['action']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderFulfillmentStatusList200Response;
      return this.apiClient.callApi(
        '/order.fulfillment_status.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderInfo operation.
     * @callback module:api/OrderApi~orderInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderInfo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.info
     * Info about a specific order by ID
     * @param {Object} opts Optional parameters
     * @param {String} [id] Retrieves order info specified by id
     * @param {String} [orderId] Retrieves order’s info specified by order id
     * @param {String} [storeId] Defines store id where the order should be found
     * @param {String} [params = 'order_id,customer,totals,address,items,bundles,status')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {Boolean} [enableCache = false)] If the value is 'true' and order exist in our cache, we will return order.info response from cache
     * @param {Boolean} [useLatestApiVersion = false)] Use the latest platform API version
     * @param {Number} [roundingPrecision] <p>Specifies the rounding precision for fractional numeric values (such as prices, taxes, and weights).</p> <p>Supported values range from <b>1</b> to <b>6</b>.</p> <p>The default rounding precision may vary depending on the platform. You can retrieve the default value using the <strong>cart.info</strong> method in the <code>default_rounding_precision</code> field. </p><p>Values are rounded to the nearest number at the specified precision. Fractions of .5 or higher are rounded up, while fractions lower than .5 are rounded down.</p>
     * @param {module:api/OrderApi~orderInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderInfo200Response}
     */
    orderInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'order_id': opts['orderId'],
        'store_id': opts['storeId'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude'],
        'enable_cache': opts['enableCache'],
        'use_latest_api_version': opts['useLatestApiVersion'],
        'rounding_precision': opts['roundingPrecision']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderInfo200Response;
      return this.apiClient.callApi(
        '/order.info.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderList operation.
     * @callback module:api/OrderApi~orderListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseOrderList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.list
     * Get list of orders from store.
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve orders via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {String} [ids] Retrieves orders specified by ids
     * @param {String} [orderIds] Retrieves orders specified by order ids
     * @param {String} [sinceId] Retrieve entities starting from the specified id.
     * @param {String} [storeId] Store Id
     * @param {String} [customerId] Retrieves orders specified by customer id
     * @param {String} [customerEmail] Retrieves orders specified by customer email
     * @param {String} [basketId] Retrieves order’s info specified by basket id.
     * @param {String} [currencyId] Currency Id
     * @param {String} [phone] Filter orders by customer's phone number
     * @param {String} [orderStatus] Retrieves orders specified by order status
     * @param {Array.<String>} [orderStatusIds] Retrieves orders specified by order statuses
     * @param {String} [ebayOrderStatus] Retrieves orders specified by order status
     * @param {String} [financialStatus] Retrieves orders specified by financial status
     * @param {Array.<String>} [financialStatusIds] Retrieves orders specified by financial status ids
     * @param {String} [fulfillmentStatus] Create order with fulfillment status
     * @param {String} [returnStatus] Retrieves orders specified by return status
     * @param {String} [fulfillmentChannel] Retrieves order with a fulfillment channel
     * @param {String} [shippingMethod] Retrieve entities according to shipping method
     * @param {String} [skipOrderIds] Skipped orders by ids
     * @param {Boolean} [isDeleted] Filter deleted orders
     * @param {String} [shippingCountryIso3] Retrieve entities according to shipping country
     * @param {String} [deliveryMethod] Retrieves order with delivery method
     * @param {String} [shipNodeType] Retrieves order with ship node type
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [tags] Order tags
     * @param {String} [sortBy = 'order_id')] Set field to sort by
     * @param {String} [sortDirection = 'asc')] Set sorting direction
     * @param {String} [params = 'order_id,customer,totals,address,items,bundles,status')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {Boolean} [enableCache = false)] If the value is 'true', we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add)
     * @param {Boolean} [useLatestApiVersion = false)] Use the latest platform API version
     * @param {Number} [roundingPrecision] <p>Specifies the rounding precision for fractional numeric values (such as prices, taxes, and weights).</p> <p>Supported values range from <b>1</b> to <b>6</b>.</p> <p>The default rounding precision may vary depending on the platform. You can retrieve the default value using the <strong>cart.info</strong> method in the <code>default_rounding_precision</code> field. </p><p>Values are rounded to the nearest number at the specified precision. Fractions of .5 or higher are rounded up, while fractions lower than .5 are rounded down.</p>
     * @param {module:api/OrderApi~orderListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseOrderList}
     */
    orderList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'ids': opts['ids'],
        'order_ids': opts['orderIds'],
        'since_id': opts['sinceId'],
        'store_id': opts['storeId'],
        'customer_id': opts['customerId'],
        'customer_email': opts['customerEmail'],
        'basket_id': opts['basketId'],
        'currency_id': opts['currencyId'],
        'phone': opts['phone'],
        'order_status': opts['orderStatus'],
        'order_status_ids': this.apiClient.buildCollectionParam(opts['orderStatusIds'], 'multi'),
        'ebay_order_status': opts['ebayOrderStatus'],
        'financial_status': opts['financialStatus'],
        'financial_status_ids': this.apiClient.buildCollectionParam(opts['financialStatusIds'], 'multi'),
        'fulfillment_status': opts['fulfillmentStatus'],
        'return_status': opts['returnStatus'],
        'fulfillment_channel': opts['fulfillmentChannel'],
        'shipping_method': opts['shippingMethod'],
        'skip_order_ids': opts['skipOrderIds'],
        'is_deleted': opts['isDeleted'],
        'shipping_country_iso3': opts['shippingCountryIso3'],
        'delivery_method': opts['deliveryMethod'],
        'ship_node_type': opts['shipNodeType'],
        'created_to': opts['createdTo'],
        'created_from': opts['createdFrom'],
        'modified_to': opts['modifiedTo'],
        'modified_from': opts['modifiedFrom'],
        'tags': opts['tags'],
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude'],
        'enable_cache': opts['enableCache'],
        'use_latest_api_version': opts['useLatestApiVersion'],
        'rounding_precision': opts['roundingPrecision']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseOrderList;
      return this.apiClient.callApi(
        '/order.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderPreestimateShippingList operation.
     * @callback module:api/OrderApi~orderPreestimateShippingListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseOrderPreestimateShippingList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.preestimate_shipping.list
     * Retrieve list of order preestimated shipping methods
     * @param {module:model/OrderPreestimateShippingList} orderPreestimateShippingList 
     * @param {module:api/OrderApi~orderPreestimateShippingListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseOrderPreestimateShippingList}
     */
    orderPreestimateShippingList(orderPreestimateShippingList, callback) {
      let postBody = orderPreestimateShippingList;
      // verify the required parameter 'orderPreestimateShippingList' is set
      if (orderPreestimateShippingList === undefined || orderPreestimateShippingList === null) {
        throw new Error("Missing the required parameter 'orderPreestimateShippingList' when calling orderPreestimateShippingList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelResponseOrderPreestimateShippingList;
      return this.apiClient.callApi(
        '/order.preestimate_shipping.list.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderRefundAdd operation.
     * @callback module:api/OrderApi~orderRefundAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderRefundAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.refund.add
     * Add a refund to the order.
     * @param {module:model/OrderRefundAdd} orderRefundAdd 
     * @param {module:api/OrderApi~orderRefundAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderRefundAdd200Response}
     */
    orderRefundAdd(orderRefundAdd, callback) {
      let postBody = orderRefundAdd;
      // verify the required parameter 'orderRefundAdd' is set
      if (orderRefundAdd === undefined || orderRefundAdd === null) {
        throw new Error("Missing the required parameter 'orderRefundAdd' when calling orderRefundAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderRefundAdd200Response;
      return this.apiClient.callApi(
        '/order.refund.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderReturnAdd operation.
     * @callback module:api/OrderApi~orderReturnAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderReturnAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.return.add
     * Create new return request.
     * @param {module:model/OrderReturnAdd} orderReturnAdd 
     * @param {module:api/OrderApi~orderReturnAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderReturnAdd200Response}
     */
    orderReturnAdd(orderReturnAdd, callback) {
      let postBody = orderReturnAdd;
      // verify the required parameter 'orderReturnAdd' is set
      if (orderReturnAdd === undefined || orderReturnAdd === null) {
        throw new Error("Missing the required parameter 'orderReturnAdd' when calling orderReturnAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderReturnAdd200Response;
      return this.apiClient.callApi(
        '/order.return.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderReturnDelete operation.
     * @callback module:api/OrderApi~orderReturnDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeValueDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.return.delete
     * Delete return.
     * @param {String} returnId Return ID
     * @param {String} orderId Defines the order id
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/OrderApi~orderReturnDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeValueDelete200Response}
     */
    orderReturnDelete(returnId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'returnId' is set
      if (returnId === undefined || returnId === null) {
        throw new Error("Missing the required parameter 'returnId' when calling orderReturnDelete");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderReturnDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'return_id': returnId,
        'order_id': orderId,
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeValueDelete200Response;
      return this.apiClient.callApi(
        '/order.return.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderReturnUpdate operation.
     * @callback module:api/OrderApi~orderReturnUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountConfigUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.return.update
     * Update order's shipment information.
     * @param {module:model/OrderReturnUpdate} orderReturnUpdate 
     * @param {module:api/OrderApi~orderReturnUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountConfigUpdate200Response}
     */
    orderReturnUpdate(orderReturnUpdate, callback) {
      let postBody = orderReturnUpdate;
      // verify the required parameter 'orderReturnUpdate' is set
      if (orderReturnUpdate === undefined || orderReturnUpdate === null) {
        throw new Error("Missing the required parameter 'orderReturnUpdate' when calling orderReturnUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountConfigUpdate200Response;
      return this.apiClient.callApi(
        '/order.return.update.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderShipmentAdd operation.
     * @callback module:api/OrderApi~orderShipmentAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderShipmentAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.shipment.add
     * Add a shipment to the order.
     * @param {module:model/OrderShipmentAdd} orderShipmentAdd 
     * @param {module:api/OrderApi~orderShipmentAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderShipmentAdd200Response}
     */
    orderShipmentAdd(orderShipmentAdd, callback) {
      let postBody = orderShipmentAdd;
      // verify the required parameter 'orderShipmentAdd' is set
      if (orderShipmentAdd === undefined || orderShipmentAdd === null) {
        throw new Error("Missing the required parameter 'orderShipmentAdd' when calling orderShipmentAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderShipmentAdd200Response;
      return this.apiClient.callApi(
        '/order.shipment.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderShipmentAddBatch operation.
     * @callback module:api/OrderApi~orderShipmentAddBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryAddBatch200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.shipment.add.batch
     * Add a shipments to the orders.
     * @param {module:model/OrderShipmentAddBatch} orderShipmentAddBatch 
     * @param {module:api/OrderApi~orderShipmentAddBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryAddBatch200Response}
     */
    orderShipmentAddBatch(orderShipmentAddBatch, callback) {
      let postBody = orderShipmentAddBatch;
      // verify the required parameter 'orderShipmentAddBatch' is set
      if (orderShipmentAddBatch === undefined || orderShipmentAddBatch === null) {
        throw new Error("Missing the required parameter 'orderShipmentAddBatch' when calling orderShipmentAddBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoryAddBatch200Response;
      return this.apiClient.callApi(
        '/order.shipment.add.batch.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderShipmentDelete operation.
     * @callback module:api/OrderApi~orderShipmentDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderShipmentDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.shipment.delete
     * Delete order's shipment.
     * @param {String} shipmentId Shipment id indicates the number of delivery
     * @param {String} orderId Defines the order for which the shipment will be deleted
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/OrderApi~orderShipmentDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderShipmentDelete200Response}
     */
    orderShipmentDelete(shipmentId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling orderShipmentDelete");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderShipmentDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'shipment_id': shipmentId,
        'order_id': orderId,
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderShipmentDelete200Response;
      return this.apiClient.callApi(
        '/order.shipment.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderShipmentInfo operation.
     * @callback module:api/OrderApi~orderShipmentInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderShipmentInfo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.shipment.info
     * Get information of shipment.
     * @param {String} id Entity id
     * @param {String} orderId Defines the order id
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {String} [storeId] Store Id
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [params = 'id,order_id,items,tracking_numbers')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/OrderApi~orderShipmentInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderShipmentInfo200Response}
     */
    orderShipmentInfo(id, orderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling orderShipmentInfo");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderShipmentInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'id': id,
        'order_id': orderId,
        'store_id': opts['storeId'],
        'response_fields': opts['responseFields'],
        'params': opts['params'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderShipmentInfo200Response;
      return this.apiClient.callApi(
        '/order.shipment.info.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderShipmentList operation.
     * @callback module:api/OrderApi~orderShipmentListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseOrderShipmentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.shipment.list
     * Get list of shipments per order.
     * @param {String} orderId Retrieves shipments specified by order id
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {String} [storeId] Store Id
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [params = 'id,order_id,items,tracking_numbers')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/OrderApi~orderShipmentListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseOrderShipmentList}
     */
    orderShipmentList(orderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderShipmentList");
      }

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'order_id': orderId,
        'store_id': opts['storeId'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'modified_from': opts['modifiedFrom'],
        'modified_to': opts['modifiedTo'],
        'response_fields': opts['responseFields'],
        'params': opts['params'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseOrderShipmentList;
      return this.apiClient.callApi(
        '/order.shipment.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderShipmentTrackingAdd operation.
     * @callback module:api/OrderApi~orderShipmentTrackingAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderShipmentTrackingAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.shipment.tracking.add
     * Add order shipment's tracking info.
     * @param {module:model/OrderShipmentTrackingAdd} orderShipmentTrackingAdd 
     * @param {module:api/OrderApi~orderShipmentTrackingAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderShipmentTrackingAdd200Response}
     */
    orderShipmentTrackingAdd(orderShipmentTrackingAdd, callback) {
      let postBody = orderShipmentTrackingAdd;
      // verify the required parameter 'orderShipmentTrackingAdd' is set
      if (orderShipmentTrackingAdd === undefined || orderShipmentTrackingAdd === null) {
        throw new Error("Missing the required parameter 'orderShipmentTrackingAdd' when calling orderShipmentTrackingAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderShipmentTrackingAdd200Response;
      return this.apiClient.callApi(
        '/order.shipment.tracking.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderShipmentUpdate operation.
     * @callback module:api/OrderApi~orderShipmentUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountConfigUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.shipment.update
     * Update order's shipment information.
     * @param {module:model/OrderShipmentUpdate} orderShipmentUpdate 
     * @param {module:api/OrderApi~orderShipmentUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountConfigUpdate200Response}
     */
    orderShipmentUpdate(orderShipmentUpdate, callback) {
      let postBody = orderShipmentUpdate;
      // verify the required parameter 'orderShipmentUpdate' is set
      if (orderShipmentUpdate === undefined || orderShipmentUpdate === null) {
        throw new Error("Missing the required parameter 'orderShipmentUpdate' when calling orderShipmentUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountConfigUpdate200Response;
      return this.apiClient.callApi(
        '/order.shipment.update.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderStatusList operation.
     * @callback module:api/OrderApi~orderStatusListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseOrderStatusList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.status.list
     * Retrieve list of statuses
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {String} [action] Available statuses for the specified action.
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {module:api/OrderApi~orderStatusListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseOrderStatusList}
     */
    orderStatusList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'store_id': opts['storeId'],
        'action': opts['action'],
        'response_fields': opts['responseFields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseOrderStatusList;
      return this.apiClient.callApi(
        '/order.status.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderTransactionList operation.
     * @callback module:api/OrderApi~orderTransactionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseOrderTransactionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.transaction.list
     * Retrieve list of order transaction
     * @param {String} orderIds Retrieves order transactions specified by order ids
     * @param {Object} opts Optional parameters
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {String} [storeId] Store Id
     * @param {String} [params = 'id,order_id,amount,description')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/OrderApi~orderTransactionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseOrderTransactionList}
     */
    orderTransactionList(orderIds, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderIds' is set
      if (orderIds === undefined || orderIds === null) {
        throw new Error("Missing the required parameter 'orderIds' when calling orderTransactionList");
      }

      let pathParams = {
      };
      let queryParams = {
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'order_ids': orderIds,
        'store_id': opts['storeId'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseOrderTransactionList;
      return this.apiClient.callApi(
        '/order.transaction.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderUpdate operation.
     * @callback module:api/OrderApi~orderUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountConfigUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order.update
     * Update existing order.
     * @param {String} orderId Defines the orders specified by order id
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Defines store id where the order should be found
     * @param {String} [orderStatus] Defines new order's status
     * @param {String} [financialStatus] Update order financial status to specified
     * @param {String} [fulfillmentStatus] Create order with fulfillment status
     * @param {String} [cancellationReason] Defines the cancellation reason when the order will be canceled
     * @param {String} [orderPaymentMethod] Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'
     * @param {String} [comment] Specifies order comment
     * @param {String} [adminComment] Specifies admin's order comment
     * @param {String} [adminPrivateComment] Specifies private admin's order comment
     * @param {String} [invoiceAdminComment] Specifies admin's order invoice comment
     * @param {String} [dateModified] Specifies order's  modification date
     * @param {String} [dateFinished] Specifies order's  finished date
     * @param {Boolean} [sendNotifications = false)] Send notifications to customer after order was created
     * @param {Boolean} [createInvoice] Determines whether an invoice should be created if it has not already been created
     * @param {String} [origin] The source of the order
     * @param {String} [tags] Order tags
     * @param {module:api/OrderApi~orderUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountConfigUpdate200Response}
     */
    orderUpdate(orderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
        'order_id': orderId,
        'store_id': opts['storeId'],
        'order_status': opts['orderStatus'],
        'financial_status': opts['financialStatus'],
        'fulfillment_status': opts['fulfillmentStatus'],
        'cancellation_reason': opts['cancellationReason'],
        'order_payment_method': opts['orderPaymentMethod'],
        'comment': opts['comment'],
        'admin_comment': opts['adminComment'],
        'admin_private_comment': opts['adminPrivateComment'],
        'invoice_admin_comment': opts['invoiceAdminComment'],
        'date_modified': opts['dateModified'],
        'date_finished': opts['dateFinished'],
        'send_notifications': opts['sendNotifications'],
        'create_invoice': opts['createInvoice'],
        'origin': opts['origin'],
        'tags': opts['tags']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountConfigUpdate200Response;
      return this.apiClient.callApi(
        '/order.update.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
