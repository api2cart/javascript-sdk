/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelResponseSubscriberList from '../model/ModelResponseSubscriberList';

/**
* Subscriber service.
* @module api/SubscriberApi
* @version 1.1
*/
export default class SubscriberApi {

    /**
    * Constructs a new SubscriberApi. 
    * @alias module:api/SubscriberApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the subscriberList operation.
     * @callback module:api/SubscriberApi~subscriberListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseSubscriberList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * subscriber.list
     * Get subscribers list
     * @param {Object} opts Optional parameters
     * @param {String} [ids] Retrieves subscribers specified by ids
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {Boolean} [subscribed] Filter by subscription status
     * @param {String} [storeId] Store Id
     * @param {String} [email] Filter subscribers by email
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [params = 'force_all')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/SubscriberApi~subscriberListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseSubscriberList}
     */
    subscriberList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ids': opts['ids'],
        'start': opts['start'],
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'subscribed': opts['subscribed'],
        'store_id': opts['storeId'],
        'email': opts['email'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'modified_from': opts['modifiedFrom'],
        'modified_to': opts['modifiedTo'],
        'response_fields': opts['responseFields'],
        'params': opts['params'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseSubscriberList;
      return this.apiClient.callApi(
        '/subscriber.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
