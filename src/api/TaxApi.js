/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelResponseTaxClassInfo from '../model/ModelResponseTaxClassInfo';
import ModelResponseTaxClassList from '../model/ModelResponseTaxClassList';

/**
* Tax service.
* @module api/TaxApi
* @version 1.1
*/
export default class TaxApi {

    /**
    * Constructs a new TaxApi. 
    * @alias module:api/TaxApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the taxClassInfo operation.
     * @callback module:api/TaxApi~taxClassInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseTaxClassInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * tax.class.info
     * Use this method to get information about a tax class and its rates. It allows you to calculate the tax percentage for a specific customer's address. This information contains relatively static data that rarely changes, so API2Cart may cache certain data to reduce the load on the store and speed up request execution. We also recommend that you cache the response of this method on your side to save requests. If you need to clear the cache for a specific store, use the cart.validate method.
     * @param {String} taxClassId Retrieves taxes specified by class id
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {String} [langId] Language id
     * @param {String} [params = 'tax_class_id,name,avail')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/TaxApi~taxClassInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseTaxClassInfo}
     */
    taxClassInfo(taxClassId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taxClassId' is set
      if (taxClassId === undefined || taxClassId === null) {
        throw new Error("Missing the required parameter 'taxClassId' when calling taxClassInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'tax_class_id': taxClassId,
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseTaxClassInfo;
      return this.apiClient.callApi(
        '/tax.class.info.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taxClassList operation.
     * @callback module:api/TaxApi~taxClassListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseTaxClassList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * tax.class.list
     * Get list of tax classes from your store.
     * @param {Object} opts Optional parameters
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [findValue] Entity search that is specified by some value
     * @param {String} [findWhere] Tax class search that is specified by field
     * @param {String} [storeId] Store Id
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {String} [responseFields = '{return_code,return_message,pagination,result}')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {module:api/TaxApi~taxClassListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseTaxClassList}
     */
    taxClassList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'created_to': opts['createdTo'],
        'created_from': opts['createdFrom'],
        'modified_to': opts['modifiedTo'],
        'modified_from': opts['modifiedFrom'],
        'find_value': opts['findValue'],
        'find_where': opts['findWhere'],
        'store_id': opts['storeId'],
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'response_fields': opts['responseFields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseTaxClassList;
      return this.apiClient.callApi(
        '/tax.class.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
