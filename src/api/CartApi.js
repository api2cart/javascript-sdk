/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AttributeAdd200Response from '../model/AttributeAdd200Response';
import AttributeDelete200Response from '../model/AttributeDelete200Response';
import BasketLiveShippingServiceDelete200Response from '../model/BasketLiveShippingServiceDelete200Response';
import CartCatalogPriceRulesCount200Response from '../model/CartCatalogPriceRulesCount200Response';
import CartCouponAdd from '../model/CartCouponAdd';
import CartCouponAdd200Response from '../model/CartCouponAdd200Response';
import CartCouponCount200Response from '../model/CartCouponCount200Response';
import CartDelete200Response from '../model/CartDelete200Response';
import CartGiftcardAdd200Response from '../model/CartGiftcardAdd200Response';
import CartGiftcardCount200Response from '../model/CartGiftcardCount200Response';
import CartInfo200Response from '../model/CartInfo200Response';
import CartMethods200Response from '../model/CartMethods200Response';
import CartPluginList200Response from '../model/CartPluginList200Response';
import CartScriptAdd200Response from '../model/CartScriptAdd200Response';
import CartValidate200Response from '../model/CartValidate200Response';
import ModelResponseCartCatalogPriceRulesList from '../model/ModelResponseCartCatalogPriceRulesList';
import ModelResponseCartCouponList from '../model/ModelResponseCartCouponList';
import ModelResponseCartGiftCardList from '../model/ModelResponseCartGiftCardList';
import ModelResponseCartMetaDataList from '../model/ModelResponseCartMetaDataList';
import ModelResponseCartScriptList from '../model/ModelResponseCartScriptList';
import ModelResponseCartShippingZonesList from '../model/ModelResponseCartShippingZonesList';

/**
* Cart service.
* @module api/CartApi
* @version 1.1
*/
export default class CartApi {

    /**
    * Constructs a new CartApi. 
    * @alias module:api/CartApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cartCatalogPriceRulesCount operation.
     * @callback module:api/CartApi~cartCatalogPriceRulesCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartCatalogPriceRulesCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.catalog_price_rules.count
     * Get count of cart catalog price rules discounts.
     * @param {module:api/CartApi~cartCatalogPriceRulesCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartCatalogPriceRulesCount200Response}
     */
    cartCatalogPriceRulesCount(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartCatalogPriceRulesCount200Response;
      return this.apiClient.callApi(
        '/cart.catalog_price_rules.count.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartCatalogPriceRulesList operation.
     * @callback module:api/CartApi~cartCatalogPriceRulesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseCartCatalogPriceRulesList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.catalog_price_rules.list
     * Get cart catalog price rules discounts.
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {String} [ids] Retrieves  catalog_price_rules by ids
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [params = 'id,name,description')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/CartApi~cartCatalogPriceRulesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseCartCatalogPriceRulesList}
     */
    cartCatalogPriceRulesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'ids': opts['ids'],
        'response_fields': opts['responseFields'],
        'params': opts['params'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseCartCatalogPriceRulesList;
      return this.apiClient.callApi(
        '/cart.catalog_price_rules.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartCouponAdd operation.
     * @callback module:api/CartApi~cartCouponAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartCouponAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.coupon.add
     * Use this method to create a coupon with specified conditions.
     * @param {module:model/CartCouponAdd} cartCouponAdd 
     * @param {module:api/CartApi~cartCouponAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartCouponAdd200Response}
     */
    cartCouponAdd(cartCouponAdd, callback) {
      let postBody = cartCouponAdd;
      // verify the required parameter 'cartCouponAdd' is set
      if (cartCouponAdd === undefined || cartCouponAdd === null) {
        throw new Error("Missing the required parameter 'cartCouponAdd' when calling cartCouponAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CartCouponAdd200Response;
      return this.apiClient.callApi(
        '/cart.coupon.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartCouponConditionAdd operation.
     * @callback module:api/CartApi~cartCouponConditionAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasketLiveShippingServiceDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.coupon.condition.add
     * Use this method to add additional conditions for coupon application.
     * @param {String} couponId Coupon Id
     * @param {module:model/String} entity Defines condition entity type
     * @param {module:model/String} key Defines condition entity attribute key
     * @param {String} operator Defines condition operator
     * @param {String} value Defines condition value, can be comma separated according to the operator.
     * @param {Object} opts Optional parameters
     * @param {String} [target = 'coupon_prerequisite')] Defines condition operator
     * @param {Boolean} [includeTax = false)] Indicates whether to apply a discount for taxes.
     * @param {Boolean} [includeShipping = false)] Indicates whether to apply a discount for shipping.
     * @param {String} [storeId] Store Id
     * @param {module:api/CartApi~cartCouponConditionAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasketLiveShippingServiceDelete200Response}
     */
    cartCouponConditionAdd(couponId, entity, key, operator, value, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling cartCouponConditionAdd");
      }
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling cartCouponConditionAdd");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling cartCouponConditionAdd");
      }
      // verify the required parameter 'operator' is set
      if (operator === undefined || operator === null) {
        throw new Error("Missing the required parameter 'operator' when calling cartCouponConditionAdd");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling cartCouponConditionAdd");
      }

      let pathParams = {
      };
      let queryParams = {
        'coupon_id': couponId,
        'entity': entity,
        'key': key,
        'operator': operator,
        'value': value,
        'target': opts['target'],
        'include_tax': opts['includeTax'],
        'include_shipping': opts['includeShipping'],
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasketLiveShippingServiceDelete200Response;
      return this.apiClient.callApi(
        '/cart.coupon.condition.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartCouponCount operation.
     * @callback module:api/CartApi~cartCouponCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartCouponCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.coupon.count
     * This method allows you to get the number of coupons. On some platforms, you can filter the coupons by the date they were active.
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {Boolean} [avail = true)] Defines category's visibility status
     * @param {String} [dateStartFrom] Filter entity by date_start (greater or equal)
     * @param {String} [dateStartTo] Filter entity by date_start (less or equal)
     * @param {String} [dateEndFrom] Filter entity by date_end (greater or equal)
     * @param {String} [dateEndTo] Filter entity by date_end (less or equal)
     * @param {module:api/CartApi~cartCouponCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartCouponCount200Response}
     */
    cartCouponCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'store_id': opts['storeId'],
        'avail': opts['avail'],
        'date_start_from': opts['dateStartFrom'],
        'date_start_to': opts['dateStartTo'],
        'date_end_from': opts['dateEndFrom'],
        'date_end_to': opts['dateEndTo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartCouponCount200Response;
      return this.apiClient.callApi(
        '/cart.coupon.count.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartCouponDelete operation.
     * @callback module:api/CartApi~cartCouponDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.coupon.delete
     * Delete coupon
     * @param {String} id Entity id
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/CartApi~cartCouponDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeDelete200Response}
     */
    cartCouponDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cartCouponDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeDelete200Response;
      return this.apiClient.callApi(
        '/cart.coupon.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartCouponList operation.
     * @callback module:api/CartApi~cartCouponListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseCartCouponList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.coupon.list
     * Get cart coupon discounts.
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {String} [couponsIds] Filter coupons by ids
     * @param {String} [storeId] Filter coupons by store id
     * @param {String} [langId] Language id
     * @param {Boolean} [avail] Filter coupons by avail status
     * @param {String} [dateStartFrom] Filter entity by date_start (greater or equal)
     * @param {String} [dateStartTo] Filter entity by date_start (less or equal)
     * @param {String} [dateEndFrom] Filter entity by date_end (greater or equal)
     * @param {String} [dateEndTo] Filter entity by date_end (less or equal)
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [params = 'id,code,name,description')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/CartApi~cartCouponListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseCartCouponList}
     */
    cartCouponList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'coupons_ids': opts['couponsIds'],
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'avail': opts['avail'],
        'date_start_from': opts['dateStartFrom'],
        'date_start_to': opts['dateStartTo'],
        'date_end_from': opts['dateEndFrom'],
        'date_end_to': opts['dateEndTo'],
        'response_fields': opts['responseFields'],
        'params': opts['params'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseCartCouponList;
      return this.apiClient.callApi(
        '/cart.coupon.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartDelete operation.
     * @callback module:api/CartApi~cartDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.delete
     * Remove store from API2Cart
     * @param {Object} opts Optional parameters
     * @param {Boolean} [deleteBridge = true)] Identifies if there is a necessity to delete bridge
     * @param {module:api/CartApi~cartDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartDelete200Response}
     */
    cartDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'delete_bridge': opts['deleteBridge']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartDelete200Response;
      return this.apiClient.callApi(
        '/cart.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartGiftcardAdd operation.
     * @callback module:api/CartApi~cartGiftcardAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartGiftcardAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.giftcard.add
     * Use this method to create a gift card for a specified amount.
     * @param {Number} amount Defines the gift card amount value.
     * @param {Object} opts Optional parameters
     * @param {String} [code] Gift card code
     * @param {String} [ownerEmail] Gift card owner email
     * @param {String} [recipientEmail] Gift card recipient email
     * @param {String} [recipientName] Gift card recipient name
     * @param {String} [ownerName] Gift card owner name
     * @param {module:api/CartApi~cartGiftcardAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartGiftcardAdd200Response}
     */
    cartGiftcardAdd(amount, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling cartGiftcardAdd");
      }

      let pathParams = {
      };
      let queryParams = {
        'amount': amount,
        'code': opts['code'],
        'owner_email': opts['ownerEmail'],
        'recipient_email': opts['recipientEmail'],
        'recipient_name': opts['recipientName'],
        'owner_name': opts['ownerName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartGiftcardAdd200Response;
      return this.apiClient.callApi(
        '/cart.giftcard.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartGiftcardCount operation.
     * @callback module:api/CartApi~cartGiftcardCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartGiftcardCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.giftcard.count
     * Get gift cards count.
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/CartApi~cartGiftcardCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartGiftcardCount200Response}
     */
    cartGiftcardCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartGiftcardCount200Response;
      return this.apiClient.callApi(
        '/cart.giftcard.count.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartGiftcardDelete operation.
     * @callback module:api/CartApi~cartGiftcardDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.giftcard.delete
     * Delete giftcard
     * @param {String} id Entity id
     * @param {module:api/CartApi~cartGiftcardDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeDelete200Response}
     */
    cartGiftcardDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cartGiftcardDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeDelete200Response;
      return this.apiClient.callApi(
        '/cart.giftcard.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartGiftcardList operation.
     * @callback module:api/CartApi~cartGiftcardListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseCartGiftCardList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.giftcard.list
     * Get gift cards list.
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {String} [storeId] Store Id
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [params = 'id,code,name')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/CartApi~cartGiftcardListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseCartGiftCardList}
     */
    cartGiftcardList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'store_id': opts['storeId'],
        'response_fields': opts['responseFields'],
        'params': opts['params'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseCartGiftCardList;
      return this.apiClient.callApi(
        '/cart.giftcard.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartInfo operation.
     * @callback module:api/CartApi~cartInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartInfo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.info
     * This method allows you to get various information about the store, including a list of stores (in the case of a multistore configuration), a list of supported languages, currencies, carriers, warehouses, and many other information. This information contains data that is relatively stable and rarely changes, so API2Cart can cache certain data to reduce the load on the store and speed up the execution of the request. We also recommend that you cache the response of this method on your side to save requests. If you need to clear the cache for a specific store, then use the cart.validate method.
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [params = 'store_name,store_url,db_prefix')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/CartApi~cartInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartInfo200Response}
     */
    cartInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'store_id': opts['storeId'],
        'response_fields': opts['responseFields'],
        'params': opts['params'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartInfo200Response;
      return this.apiClient.callApi(
        '/cart.info.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartMetaDataList operation.
     * @callback module:api/CartApi~cartMetaDataListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseCartMetaDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.meta_data.list
     * Using this method, you can get a list of metadata for various entities (products, options, customers, orders). Usually this is data created by third-party plugins.
     * @param {String} entityId Entity Id
     * @param {Object} opts Optional parameters
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {String} [entity = 'product')] Entity
     * @param {String} [storeId] Store Id
     * @param {String} [langId] Language id
     * @param {String} [key] Key
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [params = 'key,value')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/CartApi~cartMetaDataListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseCartMetaDataList}
     */
    cartMetaDataList(entityId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling cartMetaDataList");
      }

      let pathParams = {
      };
      let queryParams = {
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'entity_id': entityId,
        'entity': opts['entity'],
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'key': opts['key'],
        'response_fields': opts['responseFields'],
        'params': opts['params'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseCartMetaDataList;
      return this.apiClient.callApi(
        '/cart.meta_data.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartMetaDataSet operation.
     * @callback module:api/CartApi~cartMetaDataSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.meta_data.set
     * Set meta data for a specific entity
     * @param {String} entityId Entity Id
     * @param {String} key Key
     * @param {String} value Value
     * @param {String} namespace Metafield namespace
     * @param {Object} opts Optional parameters
     * @param {String} [entity = 'product')] Entity
     * @param {String} [storeId] Store Id
     * @param {String} [langId] Language id
     * @param {module:api/CartApi~cartMetaDataSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeAdd200Response}
     */
    cartMetaDataSet(entityId, key, value, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling cartMetaDataSet");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling cartMetaDataSet");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling cartMetaDataSet");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling cartMetaDataSet");
      }

      let pathParams = {
      };
      let queryParams = {
        'entity_id': entityId,
        'key': key,
        'value': value,
        'namespace': namespace,
        'entity': opts['entity'],
        'store_id': opts['storeId'],
        'lang_id': opts['langId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeAdd200Response;
      return this.apiClient.callApi(
        '/cart.meta_data.set.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartMetaDataUnset operation.
     * @callback module:api/CartApi~cartMetaDataUnsetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasketLiveShippingServiceDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.meta_data.unset
     * Unset meta data for a specific entity
     * @param {String} entityId Entity Id
     * @param {String} key Key
     * @param {String} id Entity id
     * @param {Object} opts Optional parameters
     * @param {String} [entity = 'product')] Entity
     * @param {String} [storeId] Store Id
     * @param {module:api/CartApi~cartMetaDataUnsetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasketLiveShippingServiceDelete200Response}
     */
    cartMetaDataUnset(entityId, key, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling cartMetaDataUnset");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling cartMetaDataUnset");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cartMetaDataUnset");
      }

      let pathParams = {
      };
      let queryParams = {
        'entity_id': entityId,
        'key': key,
        'id': id,
        'entity': opts['entity'],
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasketLiveShippingServiceDelete200Response;
      return this.apiClient.callApi(
        '/cart.meta_data.unset.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartMethods operation.
     * @callback module:api/CartApi~cartMethodsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartMethods200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.methods
     * Returns a list of supported API methods.
     * @param {module:api/CartApi~cartMethodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartMethods200Response}
     */
    cartMethods(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartMethods200Response;
      return this.apiClient.callApi(
        '/cart.methods.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartPluginList operation.
     * @callback module:api/CartApi~cartPluginListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartPluginList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.plugin.list
     * Get a list of third-party plugins installed on the store.
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [storeId] Store Id
     * @param {module:api/CartApi~cartPluginListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartPluginList200Response}
     */
    cartPluginList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartPluginList200Response;
      return this.apiClient.callApi(
        '/cart.plugin.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartScriptAdd operation.
     * @callback module:api/CartApi~cartScriptAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartScriptAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.script.add
     * Add new script to the storefront
     * @param {Object} opts Optional parameters
     * @param {String} [name] The user-friendly script name
     * @param {String} [description] The user-friendly description
     * @param {String} [html] An html string containing exactly one `script` tag.
     * @param {String} [src] The URL of the remote script
     * @param {String} [loadMethod] The load method to use for the script
     * @param {String} [scope = 'storefront')] The page or pages on the online store where the script should be included
     * @param {String} [events] Event for run scripts
     * @param {String} [storeId] Store Id
     * @param {module:api/CartApi~cartScriptAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartScriptAdd200Response}
     */
    cartScriptAdd(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'description': opts['description'],
        'html': opts['html'],
        'src': opts['src'],
        'load_method': opts['loadMethod'],
        'scope': opts['scope'],
        'events': opts['events'],
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartScriptAdd200Response;
      return this.apiClient.callApi(
        '/cart.script.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartScriptDelete operation.
     * @callback module:api/CartApi~cartScriptDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.script.delete
     * Remove script from the storefront
     * @param {String} id Entity id
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/CartApi~cartScriptDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeDelete200Response}
     */
    cartScriptDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cartScriptDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeDelete200Response;
      return this.apiClient.callApi(
        '/cart.script.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartScriptList operation.
     * @callback module:api/CartApi~cartScriptListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseCartScriptList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.script.list
     * Get scripts installed to the storefront
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {String} [scriptIds] Retrieves only scripts with specific ids
     * @param {String} [storeId] Store Id
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [params = 'id,name,description')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/CartApi~cartScriptListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseCartScriptList}
     */
    cartScriptList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'script_ids': opts['scriptIds'],
        'store_id': opts['storeId'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'modified_from': opts['modifiedFrom'],
        'modified_to': opts['modifiedTo'],
        'response_fields': opts['responseFields'],
        'params': opts['params'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseCartScriptList;
      return this.apiClient.callApi(
        '/cart.script.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartShippingZonesList operation.
     * @callback module:api/CartApi~cartShippingZonesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseCartShippingZonesList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.shipping_zones.list
     * Get list of shipping zones
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [storeId] Store Id
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [params = 'id,name,enabled')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/CartApi~cartShippingZonesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseCartShippingZonesList}
     */
    cartShippingZonesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'store_id': opts['storeId'],
        'response_fields': opts['responseFields'],
        'params': opts['params'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseCartShippingZonesList;
      return this.apiClient.callApi(
        '/cart.shipping_zones.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartValidate operation.
     * @callback module:api/CartApi~cartValidateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartValidate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cart.validate
     * This method clears the cache in API2Cart for a particular store and checks whether the connection to the store is available. Use this method if there have been any changes in the settings on the storе, for example, if a new plugin has been installed or removed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [validateVersion = false)] Specify if api2cart should validate cart version
     * @param {module:api/CartApi~cartValidateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartValidate200Response}
     */
    cartValidate(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'validate_version': opts['validateVersion']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['StoreKeyAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartValidate200Response;
      return this.apiClient.callApi(
        '/cart.validate.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
