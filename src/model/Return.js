/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReturnOrderProduct from './ReturnOrderProduct';
import ReturnStatus from './ReturnStatus';

/**
 * The Return model module.
 * @module model/Return
 * @version 1.1
 */
class Return {
    /**
     * Constructs a new <code>Return</code>.
     * @alias module:model/Return
     */
    constructor() { 
        
        Return.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Return</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Return} obj Optional instance to populate.
     * @return {module:model/Return} The populated <code>Return</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Return();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('order_id')) {
                obj['order_id'] = ApiClient.convertToType(data['order_id'], 'String');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('store_id')) {
                obj['store_id'] = ApiClient.convertToType(data['store_id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('modified_at')) {
                obj['modified_at'] = ApiClient.convertToType(data['modified_at'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ReturnStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('order_products')) {
                obj['order_products'] = ApiClient.convertToType(data['order_products'], [ReturnOrderProduct]);
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('staff_note')) {
                obj['staff_note'] = ApiClient.convertToType(data['staff_note'], 'String');
            }
            if (data.hasOwnProperty('additional_fields')) {
                obj['additional_fields'] = ApiClient.convertToType(data['additional_fields'], Object);
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Return</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Return</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['order_id'] && !(typeof data['order_id'] === 'string' || data['order_id'] instanceof String)) {
            throw new Error("Expected the field `order_id` to be a primitive type in the JSON string but got " + data['order_id']);
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        // ensure the json data is a string
        if (data['store_id'] && !(typeof data['store_id'] === 'string' || data['store_id'] instanceof String)) {
            throw new Error("Expected the field `store_id` to be a primitive type in the JSON string but got " + data['store_id']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['modified_at'] && !(typeof data['modified_at'] === 'string' || data['modified_at'] instanceof String)) {
            throw new Error("Expected the field `modified_at` to be a primitive type in the JSON string but got " + data['modified_at']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          ReturnStatus.validateJSON(data['status']);
        }
        if (data['order_products']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['order_products'])) {
                throw new Error("Expected the field `order_products` to be an array in the JSON data but got " + data['order_products']);
            }
            // validate the optional field `order_products` (array)
            for (const item of data['order_products']) {
                ReturnOrderProduct.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['staff_note'] && !(typeof data['staff_note'] === 'string' || data['staff_note'] instanceof String)) {
            throw new Error("Expected the field `staff_note` to be a primitive type in the JSON string but got " + data['staff_note']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
Return.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Return.prototype['name'] = undefined;

/**
 * @member {String} order_id
 */
Return.prototype['order_id'] = undefined;

/**
 * @member {String} customer_id
 */
Return.prototype['customer_id'] = undefined;

/**
 * @member {String} store_id
 */
Return.prototype['store_id'] = undefined;

/**
 * @member {String} created_at
 */
Return.prototype['created_at'] = undefined;

/**
 * @member {String} modified_at
 */
Return.prototype['modified_at'] = undefined;

/**
 * @member {module:model/ReturnStatus} status
 */
Return.prototype['status'] = undefined;

/**
 * @member {Array.<module:model/ReturnOrderProduct>} order_products
 */
Return.prototype['order_products'] = undefined;

/**
 * @member {String} comment
 */
Return.prototype['comment'] = undefined;

/**
 * @member {String} staff_note
 */
Return.prototype['staff_note'] = undefined;

/**
 * @member {Object} additional_fields
 */
Return.prototype['additional_fields'] = undefined;

/**
 * @member {Object} custom_fields
 */
Return.prototype['custom_fields'] = undefined;






export default Return;

