/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CartShippingMethodRate from './CartShippingMethodRate';

/**
 * The CartShippingMethod model module.
 * @module model/CartShippingMethod
 * @version 1.1
 */
class CartShippingMethod {
    /**
     * Constructs a new <code>CartShippingMethod</code>.
     * @alias module:model/CartShippingMethod
     */
    constructor() { 
        
        CartShippingMethod.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CartShippingMethod</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CartShippingMethod} obj Optional instance to populate.
     * @return {module:model/CartShippingMethod} The populated <code>CartShippingMethod</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CartShippingMethod();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('handling_fee')) {
                obj['handling_fee'] = ApiClient.convertToType(data['handling_fee'], 'String');
            }
            if (data.hasOwnProperty('handling_enabled')) {
                obj['handling_enabled'] = ApiClient.convertToType(data['handling_enabled'], 'String');
            }
            if (data.hasOwnProperty('handling_type')) {
                obj['handling_type'] = ApiClient.convertToType(data['handling_type'], 'String');
            }
            if (data.hasOwnProperty('default_price')) {
                obj['default_price'] = ApiClient.convertToType(data['default_price'], 'String');
            }
            if (data.hasOwnProperty('default_price_type')) {
                obj['default_price_type'] = ApiClient.convertToType(data['default_price_type'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'String');
            }
            if (data.hasOwnProperty('min_order_amount')) {
                obj['min_order_amount'] = ApiClient.convertToType(data['min_order_amount'], 'String');
            }
            if (data.hasOwnProperty('rates')) {
                obj['rates'] = ApiClient.convertToType(data['rates'], [CartShippingMethodRate]);
            }
            if (data.hasOwnProperty('additional_fields')) {
                obj['additional_fields'] = ApiClient.convertToType(data['additional_fields'], Object);
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CartShippingMethod</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CartShippingMethod</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['handling_fee'] && !(typeof data['handling_fee'] === 'string' || data['handling_fee'] instanceof String)) {
            throw new Error("Expected the field `handling_fee` to be a primitive type in the JSON string but got " + data['handling_fee']);
        }
        // ensure the json data is a string
        if (data['handling_enabled'] && !(typeof data['handling_enabled'] === 'string' || data['handling_enabled'] instanceof String)) {
            throw new Error("Expected the field `handling_enabled` to be a primitive type in the JSON string but got " + data['handling_enabled']);
        }
        // ensure the json data is a string
        if (data['handling_type'] && !(typeof data['handling_type'] === 'string' || data['handling_type'] instanceof String)) {
            throw new Error("Expected the field `handling_type` to be a primitive type in the JSON string but got " + data['handling_type']);
        }
        // ensure the json data is a string
        if (data['default_price'] && !(typeof data['default_price'] === 'string' || data['default_price'] instanceof String)) {
            throw new Error("Expected the field `default_price` to be a primitive type in the JSON string but got " + data['default_price']);
        }
        // ensure the json data is a string
        if (data['default_price_type'] && !(typeof data['default_price_type'] === 'string' || data['default_price_type'] instanceof String)) {
            throw new Error("Expected the field `default_price_type` to be a primitive type in the JSON string but got " + data['default_price_type']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['enabled'] && !(typeof data['enabled'] === 'string' || data['enabled'] instanceof String)) {
            throw new Error("Expected the field `enabled` to be a primitive type in the JSON string but got " + data['enabled']);
        }
        // ensure the json data is a string
        if (data['min_order_amount'] && !(typeof data['min_order_amount'] === 'string' || data['min_order_amount'] instanceof String)) {
            throw new Error("Expected the field `min_order_amount` to be a primitive type in the JSON string but got " + data['min_order_amount']);
        }
        if (data['rates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rates'])) {
                throw new Error("Expected the field `rates` to be an array in the JSON data but got " + data['rates']);
            }
            // validate the optional field `rates` (array)
            for (const item of data['rates']) {
                CartShippingMethodRate.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} name
 */
CartShippingMethod.prototype['name'] = undefined;

/**
 * @member {String} handling_fee
 */
CartShippingMethod.prototype['handling_fee'] = undefined;

/**
 * @member {String} handling_enabled
 */
CartShippingMethod.prototype['handling_enabled'] = undefined;

/**
 * @member {String} handling_type
 */
CartShippingMethod.prototype['handling_type'] = undefined;

/**
 * @member {String} default_price
 */
CartShippingMethod.prototype['default_price'] = undefined;

/**
 * @member {String} default_price_type
 */
CartShippingMethod.prototype['default_price_type'] = undefined;

/**
 * @member {String} type
 */
CartShippingMethod.prototype['type'] = undefined;

/**
 * @member {String} enabled
 */
CartShippingMethod.prototype['enabled'] = undefined;

/**
 * @member {String} min_order_amount
 */
CartShippingMethod.prototype['min_order_amount'] = undefined;

/**
 * @member {Array.<module:model/CartShippingMethodRate>} rates
 */
CartShippingMethod.prototype['rates'] = undefined;

/**
 * @member {Object} additional_fields
 */
CartShippingMethod.prototype['additional_fields'] = undefined;

/**
 * @member {Object} custom_fields
 */
CartShippingMethod.prototype['custom_fields'] = undefined;






export default CartShippingMethod;

