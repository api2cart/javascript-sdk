/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderCalculateOrderItemInner from './OrderCalculateOrderItemInner';

/**
 * The OrderCalculate model module.
 * @module model/OrderCalculate
 * @version 1.1
 */
class OrderCalculate {
    /**
     * Constructs a new <code>OrderCalculate</code>.
     * @alias module:model/OrderCalculate
     * @param customerEmail {String} Defines the customer specified by email for whom the order needs to be calculated
     * @param shippFirstName {String} Specifies shipping first name
     * @param shippLastName {String} Specifies shipping last name
     * @param shippAddress1 {String} Specifies first shipping address
     * @param shippCity {String} Specifies shipping city
     * @param shippPostcode {String} Specifies shipping postcode
     * @param shippCountry {String} Specifies shipping country code
     * @param orderItem {Array.<module:model/OrderCalculateOrderItemInner>} 
     */
    constructor(customerEmail, shippFirstName, shippLastName, shippAddress1, shippCity, shippPostcode, shippCountry, orderItem) { 
        
        OrderCalculate.initialize(this, customerEmail, shippFirstName, shippLastName, shippAddress1, shippCity, shippPostcode, shippCountry, orderItem);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, customerEmail, shippFirstName, shippLastName, shippAddress1, shippCity, shippPostcode, shippCountry, orderItem) { 
        obj['customer_email'] = customerEmail;
        obj['shipp_first_name'] = shippFirstName;
        obj['shipp_last_name'] = shippLastName;
        obj['shipp_address_1'] = shippAddress1;
        obj['shipp_city'] = shippCity;
        obj['shipp_postcode'] = shippPostcode;
        obj['shipp_country'] = shippCountry;
        obj['order_item'] = orderItem;
    }

    /**
     * Constructs a <code>OrderCalculate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderCalculate} obj Optional instance to populate.
     * @return {module:model/OrderCalculate} The populated <code>OrderCalculate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderCalculate();

            if (data.hasOwnProperty('customer_email')) {
                obj['customer_email'] = ApiClient.convertToType(data['customer_email'], 'String');
            }
            if (data.hasOwnProperty('currency_id')) {
                obj['currency_id'] = ApiClient.convertToType(data['currency_id'], 'String');
            }
            if (data.hasOwnProperty('store_id')) {
                obj['store_id'] = ApiClient.convertToType(data['store_id'], 'String');
            }
            if (data.hasOwnProperty('coupons')) {
                obj['coupons'] = ApiClient.convertToType(data['coupons'], ['String']);
            }
            if (data.hasOwnProperty('shipp_first_name')) {
                obj['shipp_first_name'] = ApiClient.convertToType(data['shipp_first_name'], 'String');
            }
            if (data.hasOwnProperty('shipp_last_name')) {
                obj['shipp_last_name'] = ApiClient.convertToType(data['shipp_last_name'], 'String');
            }
            if (data.hasOwnProperty('shipp_address_1')) {
                obj['shipp_address_1'] = ApiClient.convertToType(data['shipp_address_1'], 'String');
            }
            if (data.hasOwnProperty('shipp_address_2')) {
                obj['shipp_address_2'] = ApiClient.convertToType(data['shipp_address_2'], 'String');
            }
            if (data.hasOwnProperty('shipp_city')) {
                obj['shipp_city'] = ApiClient.convertToType(data['shipp_city'], 'String');
            }
            if (data.hasOwnProperty('shipp_postcode')) {
                obj['shipp_postcode'] = ApiClient.convertToType(data['shipp_postcode'], 'String');
            }
            if (data.hasOwnProperty('shipp_state')) {
                obj['shipp_state'] = ApiClient.convertToType(data['shipp_state'], 'String');
            }
            if (data.hasOwnProperty('shipp_country')) {
                obj['shipp_country'] = ApiClient.convertToType(data['shipp_country'], 'String');
            }
            if (data.hasOwnProperty('shipp_company')) {
                obj['shipp_company'] = ApiClient.convertToType(data['shipp_company'], 'String');
            }
            if (data.hasOwnProperty('shipp_phone')) {
                obj['shipp_phone'] = ApiClient.convertToType(data['shipp_phone'], 'String');
            }
            if (data.hasOwnProperty('bill_first_name')) {
                obj['bill_first_name'] = ApiClient.convertToType(data['bill_first_name'], 'String');
            }
            if (data.hasOwnProperty('bill_last_name')) {
                obj['bill_last_name'] = ApiClient.convertToType(data['bill_last_name'], 'String');
            }
            if (data.hasOwnProperty('bill_address_1')) {
                obj['bill_address_1'] = ApiClient.convertToType(data['bill_address_1'], 'String');
            }
            if (data.hasOwnProperty('bill_address_2')) {
                obj['bill_address_2'] = ApiClient.convertToType(data['bill_address_2'], 'String');
            }
            if (data.hasOwnProperty('bill_city')) {
                obj['bill_city'] = ApiClient.convertToType(data['bill_city'], 'String');
            }
            if (data.hasOwnProperty('bill_postcode')) {
                obj['bill_postcode'] = ApiClient.convertToType(data['bill_postcode'], 'String');
            }
            if (data.hasOwnProperty('bill_state')) {
                obj['bill_state'] = ApiClient.convertToType(data['bill_state'], 'String');
            }
            if (data.hasOwnProperty('bill_country')) {
                obj['bill_country'] = ApiClient.convertToType(data['bill_country'], 'String');
            }
            if (data.hasOwnProperty('bill_company')) {
                obj['bill_company'] = ApiClient.convertToType(data['bill_company'], 'String');
            }
            if (data.hasOwnProperty('bill_phone')) {
                obj['bill_phone'] = ApiClient.convertToType(data['bill_phone'], 'String');
            }
            if (data.hasOwnProperty('response_fields')) {
                obj['response_fields'] = ApiClient.convertToType(data['response_fields'], 'String');
            }
            if (data.hasOwnProperty('order_item')) {
                obj['order_item'] = ApiClient.convertToType(data['order_item'], [OrderCalculateOrderItemInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderCalculate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderCalculate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrderCalculate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['customer_email'] && !(typeof data['customer_email'] === 'string' || data['customer_email'] instanceof String)) {
            throw new Error("Expected the field `customer_email` to be a primitive type in the JSON string but got " + data['customer_email']);
        }
        // ensure the json data is a string
        if (data['currency_id'] && !(typeof data['currency_id'] === 'string' || data['currency_id'] instanceof String)) {
            throw new Error("Expected the field `currency_id` to be a primitive type in the JSON string but got " + data['currency_id']);
        }
        // ensure the json data is a string
        if (data['store_id'] && !(typeof data['store_id'] === 'string' || data['store_id'] instanceof String)) {
            throw new Error("Expected the field `store_id` to be a primitive type in the JSON string but got " + data['store_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['coupons'])) {
            throw new Error("Expected the field `coupons` to be an array in the JSON data but got " + data['coupons']);
        }
        // ensure the json data is a string
        if (data['shipp_first_name'] && !(typeof data['shipp_first_name'] === 'string' || data['shipp_first_name'] instanceof String)) {
            throw new Error("Expected the field `shipp_first_name` to be a primitive type in the JSON string but got " + data['shipp_first_name']);
        }
        // ensure the json data is a string
        if (data['shipp_last_name'] && !(typeof data['shipp_last_name'] === 'string' || data['shipp_last_name'] instanceof String)) {
            throw new Error("Expected the field `shipp_last_name` to be a primitive type in the JSON string but got " + data['shipp_last_name']);
        }
        // ensure the json data is a string
        if (data['shipp_address_1'] && !(typeof data['shipp_address_1'] === 'string' || data['shipp_address_1'] instanceof String)) {
            throw new Error("Expected the field `shipp_address_1` to be a primitive type in the JSON string but got " + data['shipp_address_1']);
        }
        // ensure the json data is a string
        if (data['shipp_address_2'] && !(typeof data['shipp_address_2'] === 'string' || data['shipp_address_2'] instanceof String)) {
            throw new Error("Expected the field `shipp_address_2` to be a primitive type in the JSON string but got " + data['shipp_address_2']);
        }
        // ensure the json data is a string
        if (data['shipp_city'] && !(typeof data['shipp_city'] === 'string' || data['shipp_city'] instanceof String)) {
            throw new Error("Expected the field `shipp_city` to be a primitive type in the JSON string but got " + data['shipp_city']);
        }
        // ensure the json data is a string
        if (data['shipp_postcode'] && !(typeof data['shipp_postcode'] === 'string' || data['shipp_postcode'] instanceof String)) {
            throw new Error("Expected the field `shipp_postcode` to be a primitive type in the JSON string but got " + data['shipp_postcode']);
        }
        // ensure the json data is a string
        if (data['shipp_state'] && !(typeof data['shipp_state'] === 'string' || data['shipp_state'] instanceof String)) {
            throw new Error("Expected the field `shipp_state` to be a primitive type in the JSON string but got " + data['shipp_state']);
        }
        // ensure the json data is a string
        if (data['shipp_country'] && !(typeof data['shipp_country'] === 'string' || data['shipp_country'] instanceof String)) {
            throw new Error("Expected the field `shipp_country` to be a primitive type in the JSON string but got " + data['shipp_country']);
        }
        // ensure the json data is a string
        if (data['shipp_company'] && !(typeof data['shipp_company'] === 'string' || data['shipp_company'] instanceof String)) {
            throw new Error("Expected the field `shipp_company` to be a primitive type in the JSON string but got " + data['shipp_company']);
        }
        // ensure the json data is a string
        if (data['shipp_phone'] && !(typeof data['shipp_phone'] === 'string' || data['shipp_phone'] instanceof String)) {
            throw new Error("Expected the field `shipp_phone` to be a primitive type in the JSON string but got " + data['shipp_phone']);
        }
        // ensure the json data is a string
        if (data['bill_first_name'] && !(typeof data['bill_first_name'] === 'string' || data['bill_first_name'] instanceof String)) {
            throw new Error("Expected the field `bill_first_name` to be a primitive type in the JSON string but got " + data['bill_first_name']);
        }
        // ensure the json data is a string
        if (data['bill_last_name'] && !(typeof data['bill_last_name'] === 'string' || data['bill_last_name'] instanceof String)) {
            throw new Error("Expected the field `bill_last_name` to be a primitive type in the JSON string but got " + data['bill_last_name']);
        }
        // ensure the json data is a string
        if (data['bill_address_1'] && !(typeof data['bill_address_1'] === 'string' || data['bill_address_1'] instanceof String)) {
            throw new Error("Expected the field `bill_address_1` to be a primitive type in the JSON string but got " + data['bill_address_1']);
        }
        // ensure the json data is a string
        if (data['bill_address_2'] && !(typeof data['bill_address_2'] === 'string' || data['bill_address_2'] instanceof String)) {
            throw new Error("Expected the field `bill_address_2` to be a primitive type in the JSON string but got " + data['bill_address_2']);
        }
        // ensure the json data is a string
        if (data['bill_city'] && !(typeof data['bill_city'] === 'string' || data['bill_city'] instanceof String)) {
            throw new Error("Expected the field `bill_city` to be a primitive type in the JSON string but got " + data['bill_city']);
        }
        // ensure the json data is a string
        if (data['bill_postcode'] && !(typeof data['bill_postcode'] === 'string' || data['bill_postcode'] instanceof String)) {
            throw new Error("Expected the field `bill_postcode` to be a primitive type in the JSON string but got " + data['bill_postcode']);
        }
        // ensure the json data is a string
        if (data['bill_state'] && !(typeof data['bill_state'] === 'string' || data['bill_state'] instanceof String)) {
            throw new Error("Expected the field `bill_state` to be a primitive type in the JSON string but got " + data['bill_state']);
        }
        // ensure the json data is a string
        if (data['bill_country'] && !(typeof data['bill_country'] === 'string' || data['bill_country'] instanceof String)) {
            throw new Error("Expected the field `bill_country` to be a primitive type in the JSON string but got " + data['bill_country']);
        }
        // ensure the json data is a string
        if (data['bill_company'] && !(typeof data['bill_company'] === 'string' || data['bill_company'] instanceof String)) {
            throw new Error("Expected the field `bill_company` to be a primitive type in the JSON string but got " + data['bill_company']);
        }
        // ensure the json data is a string
        if (data['bill_phone'] && !(typeof data['bill_phone'] === 'string' || data['bill_phone'] instanceof String)) {
            throw new Error("Expected the field `bill_phone` to be a primitive type in the JSON string but got " + data['bill_phone']);
        }
        // ensure the json data is a string
        if (data['response_fields'] && !(typeof data['response_fields'] === 'string' || data['response_fields'] instanceof String)) {
            throw new Error("Expected the field `response_fields` to be a primitive type in the JSON string but got " + data['response_fields']);
        }
        if (data['order_item']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['order_item'])) {
                throw new Error("Expected the field `order_item` to be an array in the JSON data but got " + data['order_item']);
            }
            // validate the optional field `order_item` (array)
            for (const item of data['order_item']) {
                OrderCalculateOrderItemInner.validateJSON(item);
            };
        }

        return true;
    }


}

OrderCalculate.RequiredProperties = ["customer_email", "shipp_first_name", "shipp_last_name", "shipp_address_1", "shipp_city", "shipp_postcode", "shipp_country", "order_item"];

/**
 * Defines the customer specified by email for whom the order needs to be calculated
 * @member {String} customer_email
 */
OrderCalculate.prototype['customer_email'] = undefined;

/**
 * Currency Id
 * @member {String} currency_id
 */
OrderCalculate.prototype['currency_id'] = undefined;

/**
 * Store Id
 * @member {String} store_id
 */
OrderCalculate.prototype['store_id'] = undefined;

/**
 * Coupons that will be applied to order. If the order isn't eligible for any given discount code or there is no discount with such a code it will be skipped during calculation
 * @member {Array.<String>} coupons
 */
OrderCalculate.prototype['coupons'] = undefined;

/**
 * Specifies shipping first name
 * @member {String} shipp_first_name
 */
OrderCalculate.prototype['shipp_first_name'] = undefined;

/**
 * Specifies shipping last name
 * @member {String} shipp_last_name
 */
OrderCalculate.prototype['shipp_last_name'] = undefined;

/**
 * Specifies first shipping address
 * @member {String} shipp_address_1
 */
OrderCalculate.prototype['shipp_address_1'] = undefined;

/**
 * Specifies second address line of a shipping street address
 * @member {String} shipp_address_2
 */
OrderCalculate.prototype['shipp_address_2'] = undefined;

/**
 * Specifies shipping city
 * @member {String} shipp_city
 */
OrderCalculate.prototype['shipp_city'] = undefined;

/**
 * Specifies shipping postcode
 * @member {String} shipp_postcode
 */
OrderCalculate.prototype['shipp_postcode'] = undefined;

/**
 * Specifies shipping state code
 * @member {String} shipp_state
 */
OrderCalculate.prototype['shipp_state'] = undefined;

/**
 * Specifies shipping country code
 * @member {String} shipp_country
 */
OrderCalculate.prototype['shipp_country'] = undefined;

/**
 * Specifies shipping company
 * @member {String} shipp_company
 */
OrderCalculate.prototype['shipp_company'] = undefined;

/**
 * Specifies shipping phone
 * @member {String} shipp_phone
 */
OrderCalculate.prototype['shipp_phone'] = undefined;

/**
 * Specifies billing first name
 * @member {String} bill_first_name
 */
OrderCalculate.prototype['bill_first_name'] = undefined;

/**
 * Specifies billing last name
 * @member {String} bill_last_name
 */
OrderCalculate.prototype['bill_last_name'] = undefined;

/**
 * Specifies first billing address
 * @member {String} bill_address_1
 */
OrderCalculate.prototype['bill_address_1'] = undefined;

/**
 * Specifies second billing address
 * @member {String} bill_address_2
 */
OrderCalculate.prototype['bill_address_2'] = undefined;

/**
 * Specifies billing city
 * @member {String} bill_city
 */
OrderCalculate.prototype['bill_city'] = undefined;

/**
 * Specifies billing postcode
 * @member {String} bill_postcode
 */
OrderCalculate.prototype['bill_postcode'] = undefined;

/**
 * Specifies billing state code
 * @member {String} bill_state
 */
OrderCalculate.prototype['bill_state'] = undefined;

/**
 * Specifies billing country code
 * @member {String} bill_country
 */
OrderCalculate.prototype['bill_country'] = undefined;

/**
 * Specifies billing company
 * @member {String} bill_company
 */
OrderCalculate.prototype['bill_company'] = undefined;

/**
 * Specifies billing phone
 * @member {String} bill_phone
 */
OrderCalculate.prototype['bill_phone'] = undefined;

/**
 * Set this parameter in order to choose which entity fields you want to retrieve
 * @member {String} response_fields
 */
OrderCalculate.prototype['response_fields'] = undefined;

/**
 * @member {Array.<module:model/OrderCalculateOrderItemInner>} order_item
 */
OrderCalculate.prototype['order_item'] = undefined;






export default OrderCalculate;

