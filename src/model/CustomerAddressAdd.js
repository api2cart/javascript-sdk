/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CustomerAddressAdd model module.
 * @module model/CustomerAddressAdd
 * @version 1.1
 */
class CustomerAddressAdd {
    /**
     * Constructs a new <code>CustomerAddressAdd</code>.
     * @alias module:model/CustomerAddressAdd
     * @param customerId {String} Defines customer id
     * @param address1 {String} Specifies customer's address address1
     * @param city {String} Specifies customer's address city
     * @param country {String} Specifies customer's address ISO code or name of country
     * @param postcode {String} Specifies customer's address postcode
     */
    constructor(customerId, address1, city, country, postcode) { 
        
        CustomerAddressAdd.initialize(this, customerId, address1, city, country, postcode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, customerId, address1, city, country, postcode) { 
        obj['customer_id'] = customerId;
        obj['address1'] = address1;
        obj['city'] = city;
        obj['country'] = country;
        obj['postcode'] = postcode;
    }

    /**
     * Constructs a <code>CustomerAddressAdd</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomerAddressAdd} obj Optional instance to populate.
     * @return {module:model/CustomerAddressAdd} The populated <code>CustomerAddressAdd</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomerAddressAdd();

            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('store_id')) {
                obj['store_id'] = ApiClient.convertToType(data['store_id'], 'String');
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('address1')) {
                obj['address1'] = ApiClient.convertToType(data['address1'], 'String');
            }
            if (data.hasOwnProperty('address2')) {
                obj['address2'] = ApiClient.convertToType(data['address2'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('postcode')) {
                obj['postcode'] = ApiClient.convertToType(data['postcode'], 'String');
            }
            if (data.hasOwnProperty('identification_number')) {
                obj['identification_number'] = ApiClient.convertToType(data['identification_number'], 'String');
            }
            if (data.hasOwnProperty('types')) {
                obj['types'] = ApiClient.convertToType(data['types'], ['String']);
            }
            if (data.hasOwnProperty('default')) {
                obj['default'] = ApiClient.convertToType(data['default'], 'Boolean');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('phone_mobile')) {
                obj['phone_mobile'] = ApiClient.convertToType(data['phone_mobile'], 'String');
            }
            if (data.hasOwnProperty('fax')) {
                obj['fax'] = ApiClient.convertToType(data['fax'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('tax_id')) {
                obj['tax_id'] = ApiClient.convertToType(data['tax_id'], 'String');
            }
            if (data.hasOwnProperty('alias')) {
                obj['alias'] = ApiClient.convertToType(data['alias'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomerAddressAdd</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomerAddressAdd</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomerAddressAdd.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        // ensure the json data is a string
        if (data['store_id'] && !(typeof data['store_id'] === 'string' || data['store_id'] instanceof String)) {
            throw new Error("Expected the field `store_id` to be a primitive type in the JSON string but got " + data['store_id']);
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        // ensure the json data is a string
        if (data['address1'] && !(typeof data['address1'] === 'string' || data['address1'] instanceof String)) {
            throw new Error("Expected the field `address1` to be a primitive type in the JSON string but got " + data['address1']);
        }
        // ensure the json data is a string
        if (data['address2'] && !(typeof data['address2'] === 'string' || data['address2'] instanceof String)) {
            throw new Error("Expected the field `address2` to be a primitive type in the JSON string but got " + data['address2']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['postcode'] && !(typeof data['postcode'] === 'string' || data['postcode'] instanceof String)) {
            throw new Error("Expected the field `postcode` to be a primitive type in the JSON string but got " + data['postcode']);
        }
        // ensure the json data is a string
        if (data['identification_number'] && !(typeof data['identification_number'] === 'string' || data['identification_number'] instanceof String)) {
            throw new Error("Expected the field `identification_number` to be a primitive type in the JSON string but got " + data['identification_number']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['types'])) {
            throw new Error("Expected the field `types` to be an array in the JSON data but got " + data['types']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['phone_mobile'] && !(typeof data['phone_mobile'] === 'string' || data['phone_mobile'] instanceof String)) {
            throw new Error("Expected the field `phone_mobile` to be a primitive type in the JSON string but got " + data['phone_mobile']);
        }
        // ensure the json data is a string
        if (data['fax'] && !(typeof data['fax'] === 'string' || data['fax'] instanceof String)) {
            throw new Error("Expected the field `fax` to be a primitive type in the JSON string but got " + data['fax']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // ensure the json data is a string
        if (data['tax_id'] && !(typeof data['tax_id'] === 'string' || data['tax_id'] instanceof String)) {
            throw new Error("Expected the field `tax_id` to be a primitive type in the JSON string but got " + data['tax_id']);
        }
        // ensure the json data is a string
        if (data['alias'] && !(typeof data['alias'] === 'string' || data['alias'] instanceof String)) {
            throw new Error("Expected the field `alias` to be a primitive type in the JSON string but got " + data['alias']);
        }

        return true;
    }


}

CustomerAddressAdd.RequiredProperties = ["customer_id", "address1", "city", "country", "postcode"];

/**
 * Defines customer id
 * @member {String} customer_id
 */
CustomerAddressAdd.prototype['customer_id'] = undefined;

/**
 * Store Id
 * @member {String} store_id
 */
CustomerAddressAdd.prototype['store_id'] = undefined;

/**
 * Defines customer's address first name
 * @member {String} first_name
 */
CustomerAddressAdd.prototype['first_name'] = undefined;

/**
 * Defines customer's address last name
 * @member {String} last_name
 */
CustomerAddressAdd.prototype['last_name'] = undefined;

/**
 * Defines customer's address company
 * @member {String} company
 */
CustomerAddressAdd.prototype['company'] = undefined;

/**
 * Specifies customer's address address1
 * @member {String} address1
 */
CustomerAddressAdd.prototype['address1'] = undefined;

/**
 * Specifies customer's address address2
 * @member {String} address2
 */
CustomerAddressAdd.prototype['address2'] = undefined;

/**
 * Specifies customer's address city
 * @member {String} city
 */
CustomerAddressAdd.prototype['city'] = undefined;

/**
 * Specifies customer's address ISO code or name of country
 * @member {String} country
 */
CustomerAddressAdd.prototype['country'] = undefined;

/**
 * Specifies customer's address ISO code or name of state
 * @member {String} state
 */
CustomerAddressAdd.prototype['state'] = undefined;

/**
 * Specifies customer's address postcode
 * @member {String} postcode
 */
CustomerAddressAdd.prototype['postcode'] = undefined;

/**
 * Specifies the national ID card number of this person, or a unique tax identification number for customer's address
 * @member {String} identification_number
 */
CustomerAddressAdd.prototype['identification_number'] = undefined;

/**
 * Specifies customer's address types
 * @member {Array.<String>} types
 */
CustomerAddressAdd.prototype['types'] = undefined;

/**
 * Specifies whether the customer's address is used by default
 * @member {Boolean} default
 */
CustomerAddressAdd.prototype['default'] = undefined;

/**
 * Defines customer's address phone number
 * @member {String} phone
 */
CustomerAddressAdd.prototype['phone'] = undefined;

/**
 * Defines customer's address mobile phone number
 * @member {String} phone_mobile
 */
CustomerAddressAdd.prototype['phone_mobile'] = undefined;

/**
 * Defines customer's address fax
 * @member {String} fax
 */
CustomerAddressAdd.prototype['fax'] = undefined;

/**
 * Defines Link to customer's address website
 * @member {String} website
 */
CustomerAddressAdd.prototype['website'] = undefined;

/**
 * Defines customer's address gender
 * @member {String} gender
 */
CustomerAddressAdd.prototype['gender'] = undefined;

/**
 * Add Tax Id
 * @member {String} tax_id
 */
CustomerAddressAdd.prototype['tax_id'] = undefined;

/**
 * Specifies customer's alias in the address book
 * @member {String} alias
 */
CustomerAddressAdd.prototype['alias'] = undefined;






export default CustomerAddressAdd;

