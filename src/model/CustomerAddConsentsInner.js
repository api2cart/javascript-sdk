/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CustomerAddConsentsInner model module.
 * @module model/CustomerAddConsentsInner
 * @version 1.1
 */
class CustomerAddConsentsInner {
    /**
     * Constructs a new <code>CustomerAddConsentsInner</code>.
     * @alias module:model/CustomerAddConsentsInner
     * @param type {module:model/CustomerAddConsentsInner.TypeEnum} 
     * @param status {String} 
     * @param optInLevel {String} 
     */
    constructor(type, status, optInLevel) { 
        
        CustomerAddConsentsInner.initialize(this, type, status, optInLevel);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, status, optInLevel) { 
        obj['type'] = type;
        obj['status'] = status;
        obj['opt_in_level'] = optInLevel;
    }

    /**
     * Constructs a <code>CustomerAddConsentsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomerAddConsentsInner} obj Optional instance to populate.
     * @return {module:model/CustomerAddConsentsInner} The populated <code>CustomerAddConsentsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomerAddConsentsInner();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('opt_in_level')) {
                obj['opt_in_level'] = ApiClient.convertToType(data['opt_in_level'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomerAddConsentsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomerAddConsentsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomerAddConsentsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['opt_in_level'] && !(typeof data['opt_in_level'] === 'string' || data['opt_in_level'] instanceof String)) {
            throw new Error("Expected the field `opt_in_level` to be a primitive type in the JSON string but got " + data['opt_in_level']);
        }

        return true;
    }


}

CustomerAddConsentsInner.RequiredProperties = ["type", "status", "opt_in_level"];

/**
 * @member {module:model/CustomerAddConsentsInner.TypeEnum} type
 */
CustomerAddConsentsInner.prototype['type'] = undefined;

/**
 * @member {String} status
 */
CustomerAddConsentsInner.prototype['status'] = undefined;

/**
 * @member {String} opt_in_level
 */
CustomerAddConsentsInner.prototype['opt_in_level'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CustomerAddConsentsInner['TypeEnum'] = {

    /**
     * value: "email"
     * @const
     */
    "email": "email",

    /**
     * value: "sms"
     * @const
     */
    "sms": "sms"
};



export default CustomerAddConsentsInner;

