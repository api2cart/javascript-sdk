/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProductOptionAddValuesInner from './ProductOptionAddValuesInner';

/**
 * The ProductOptionAdd model module.
 * @module model/ProductOptionAdd
 * @version 1.1
 */
class ProductOptionAdd {
    /**
     * Constructs a new <code>ProductOptionAdd</code>.
     * @alias module:model/ProductOptionAdd
     * @param name {String} Defines option's name
     * @param type {module:model/ProductOptionAdd.TypeEnum} Defines option's type that has to be added
     */
    constructor(name, type) { 
        
        ProductOptionAdd.initialize(this, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type) { 
        obj['name'] = name;
        obj['type'] = type;
        obj['avail'] = true;
        obj['sort_order'] = 0;
        obj['required'] = false;
        obj['clear_cache'] = true;
    }

    /**
     * Constructs a <code>ProductOptionAdd</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductOptionAdd} obj Optional instance to populate.
     * @return {module:model/ProductOptionAdd} The populated <code>ProductOptionAdd</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductOptionAdd();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('product_id')) {
                obj['product_id'] = ApiClient.convertToType(data['product_id'], 'String');
            }
            if (data.hasOwnProperty('default_option_value')) {
                obj['default_option_value'] = ApiClient.convertToType(data['default_option_value'], 'String');
            }
            if (data.hasOwnProperty('option_values')) {
                obj['option_values'] = ApiClient.convertToType(data['option_values'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('avail')) {
                obj['avail'] = ApiClient.convertToType(data['avail'], 'Boolean');
            }
            if (data.hasOwnProperty('sort_order')) {
                obj['sort_order'] = ApiClient.convertToType(data['sort_order'], 'Number');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], [ProductOptionAddValuesInner]);
            }
            if (data.hasOwnProperty('clear_cache')) {
                obj['clear_cache'] = ApiClient.convertToType(data['clear_cache'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductOptionAdd</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductOptionAdd</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProductOptionAdd.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['product_id'] && !(typeof data['product_id'] === 'string' || data['product_id'] instanceof String)) {
            throw new Error("Expected the field `product_id` to be a primitive type in the JSON string but got " + data['product_id']);
        }
        // ensure the json data is a string
        if (data['default_option_value'] && !(typeof data['default_option_value'] === 'string' || data['default_option_value'] instanceof String)) {
            throw new Error("Expected the field `default_option_value` to be a primitive type in the JSON string but got " + data['default_option_value']);
        }
        // ensure the json data is a string
        if (data['option_values'] && !(typeof data['option_values'] === 'string' || data['option_values'] instanceof String)) {
            throw new Error("Expected the field `option_values` to be a primitive type in the JSON string but got " + data['option_values']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['values']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['values'])) {
                throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
            }
            // validate the optional field `values` (array)
            for (const item of data['values']) {
                ProductOptionAddValuesInner.validateJSON(item);
            };
        }

        return true;
    }


}

ProductOptionAdd.RequiredProperties = ["name", "type"];

/**
 * Defines option's name
 * @member {String} name
 */
ProductOptionAdd.prototype['name'] = undefined;

/**
 * Defines option's type that has to be added
 * @member {module:model/ProductOptionAdd.TypeEnum} type
 */
ProductOptionAdd.prototype['type'] = undefined;

/**
 * Defines product id where the option should be added
 * @member {String} product_id
 */
ProductOptionAdd.prototype['product_id'] = undefined;

/**
 * Defines default option value that has to be added
 * @member {String} default_option_value
 */
ProductOptionAdd.prototype['default_option_value'] = undefined;

/**
 * Defines option values that has to be added
 * @member {String} option_values
 */
ProductOptionAdd.prototype['option_values'] = undefined;

/**
 * Defines option's description
 * @member {String} description
 */
ProductOptionAdd.prototype['description'] = undefined;

/**
 * Defines whether the option is available
 * @member {Boolean} avail
 * @default true
 */
ProductOptionAdd.prototype['avail'] = true;

/**
 * Sort number in the list
 * @member {Number} sort_order
 * @default 0
 */
ProductOptionAdd.prototype['sort_order'] = 0;

/**
 * Defines if the option is required
 * @member {Boolean} required
 * @default false
 */
ProductOptionAdd.prototype['required'] = false;

/**
 * An array of option values.</b>
 * @member {Array.<module:model/ProductOptionAddValuesInner>} values
 */
ProductOptionAdd.prototype['values'] = undefined;

/**
 * Is cache clear required
 * @member {Boolean} clear_cache
 * @default true
 */
ProductOptionAdd.prototype['clear_cache'] = true;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ProductOptionAdd['TypeEnum'] = {

    /**
     * value: "option_type_select"
     * @const
     */
    "option_type_select": "option_type_select",

    /**
     * value: "option_type_text"
     * @const
     */
    "option_type_text": "option_type_text",

    /**
     * value: "option_type_radio"
     * @const
     */
    "option_type_radio": "option_type_radio",

    /**
     * value: "option_type_checkbox"
     * @const
     */
    "option_type_checkbox": "option_type_checkbox",

    /**
     * value: "option_type_textarea"
     * @const
     */
    "option_type_textarea": "option_type_textarea",

    /**
     * value: "option_type_readonly"
     * @const
     */
    "option_type_readonly": "option_type_readonly",

    /**
     * value: "option_type_multiselect"
     * @const
     */
    "option_type_multiselect": "option_type_multiselect",

    /**
     * value: "option_type_multicheckbox"
     * @const
     */
    "option_type_multicheckbox": "option_type_multicheckbox",

    /**
     * value: "option_type_file"
     * @const
     */
    "option_type_file": "option_type_file",

    /**
     * value: "option_type_date"
     * @const
     */
    "option_type_date": "option_type_date",

    /**
     * value: "option_type_datetime"
     * @const
     */
    "option_type_datetime": "option_type_datetime",

    /**
     * value: "option_type_time"
     * @const
     */
    "option_type_time": "option_type_time"
};



export default ProductOptionAdd;

